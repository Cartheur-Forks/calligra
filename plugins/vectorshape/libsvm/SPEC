                          StarView Metafile

                            Specification


1. Introduction
===============

This file describes the format of a StarView Metafile, SVM, the vector
file format that is used by Star Office, OpenOffice.org, and
LibreOffice to create object replacement images.

As far as we know, there is no formal specification of this format.
This documentation has been created by reading the source code of
LibreOffice, in the vcl subdirectory.  The most important files are:

  vcl/inc/vcl/gdimtf.hxx
  vcl/inc/vcl/metaact.hxx
  vcl/source/gdimtf.cxx
  vcl/source/metaact.cxx

The format of this document is modeled after the documentations of
Windows MetaFile ([MS-WMF].pdf) and the Extended MetaFile
([MS-EMF].pdf) from Microsoft.


1.1 Glossary
------------
FIXME


1.2 Structure Overview
----------------------

An SVM file always starts with a signature of 6 bytes that identifies
the file as an SVM.  This signature is always the string "VCLMTF"
(excluding the quotes).

After that there is a header object describing the rest of the file
followed by a number of actions as specified in the header.  Each
action or object, including the header, starts with a VersionCompat
object that specifies the version and size of the action or object in
question.


2. Structures
=============
FIXME


2.1 SVM Constants
-----------------
FIXME


2.1.1 SVM Enumerations
- - - - - - - - - - - -
FIXME


2.1.1.1 ActionType Enumeration

The ActionType Enumeration defines the type of actions that can be
used in an SVM file.

enum ActionType {
    META_NULL_ACTION                  = 0,
    META_PIXEL_ACTION                 = 100,
    META_POINT_ACTION                 = 101,
    META_LINE_ACTION                  = 102,
    META_RECT_ACTION                  = 103,
    META_ROUNDRECT_ACTION             = 104,
    META_ELLIPSE_ACTION               = 105
    META_ARC_ACTION                   = 106,
    META_PIE_ACTION                   = 107,
    META_CHORD_ACTION                 = 108,
    META_POLYLINE_ACTION              = 109,
    META_POLYGON_ACTION               = 110,
    META_POLYPOLYGON_ACTION           = 111,
    META_TEXT_ACTION                  = 112,
    META_TEXTARRAY_ACTION             = 113,
    META_STRETCHTEXT_ACTION           = 114,
    META_TEXTRECT_ACTION              = 115,
    META_BMP_ACTION                   = 116,
    META_BMPSCALE_ACTION              = 117,
    META_BMPSCALEPART_ACTION          = 118,
    META_BMPEX_ACTION                 = 119,
    META_BMPEXSCALE_ACTION            = 120,
    META_BMPEXSCALEPART_ACTION        = 121,
    META_MASK_ACTION                  = 122,
    META_MASKSCALE_ACTION             = 123,
    META_MASKSCALEPART_ACTION         = 124,
    META_GRADIENT_ACTION              = 125,
    META_HATCH_ACTION                 = 126,
    META_WALLPAPER_ACTION             = 127,
    META_CLIPREGION_ACTION            = 128,
    META_ISECTRECTCLIPREGION_ACTION   = 129,
    META_ISECTREGIONCLIPREGION_ACTION = 130,
    META_MOVECLIPREGION_ACTION        = 131,
    META_LINECOLOR_ACTION             = 132,
    META_FILLCOLOR_ACTION             = 133,
    META_TEXTCOLOR_ACTION             = 134,
    META_TEXTFILLCOLOR_ACTION         = 135,
    META_TEXTALIGN_ACTION             = 136,
    META_MAPMODE_ACTION               = 137,
    META_FONT_ACTION                  = 138,
    META_PUSH_ACTION                  = 139,
    META_POP_ACTION                   = 140,
    META_RASTEROP_ACTION              = 141,
    META_TRANSPARENT_ACTION           = 142,
    META_EPS_ACTION                   = 143,
    META_REFPOINT_ACTION              = 144,
    META_TEXTLINECOLOR_ACTION         = 145,
    META_TEXTLINE_ACTION              = 146,
    META_FLOATTRANSPARENT_ACTION      = 147,
    META_GRADIENTEX_ACTION            = 148,
    META_LAYOUTMODE_ACTION            = 149,
    META_TEXTLANGUAGE_ACTION          = 150,
    META_OVERLINECOLOR_ACTION         = 151,
    META_COMMENT_ACTION               = 512
};


2.1.1.2 Mtf Enumeration

The Mtf Enumeration defines ...    FIXME

enum MtfType {
    MTF_CONVERSION_NONE           = 0,
    MTF_CONVERSION_1BIT_THRESHOLD = 1,
    MTF_CONVERSION_8BIT_GREYS     = 2
};


2.1.1.3 ... Enumeration
FIXME


2.1.2 SVM Flags
- - - - - - - -

2.1.2.1 Mirror Flags


MTF_MIRROR_NONE    0x00000000
MTF_MIRROR_HORZ    0x00000001
MTF_MIRROR_VERT    0x00000002



2.1.2.2 ... Flags
FIXME


2.2 SVM Objects
---------------
FIXME


2.2.1 Basic Objects
- - - - - - - - - -

These object types are mostly used as primitives in the larger and
more complex object types and actions.


2.2.1.1 VersionCompat Object

The VersionCompat object is always the first object of any bigger
object and any action. This object describes which version the object
or action has.

struct VersionCompat {
    uint16 version;
    uint32 length;
}

A VersionCompat object is the header of most SVM Actions and Objects.
I defines the version of the object, thus changing the parser
behaviour, and the length of the object, excluding the VersionCompat
object.


2.2.2.2 String

struct String {
    uint16 size;
    char   data[size];
}

A string object is built in a Pascal style, not a C style.  There is
no trailing \0 at the end of the string.


2.2.1.2 Header Object

The header object is always the first object in a SVM file. It has the
following parts.

VersionCompat 	versionCompat
uint32          compressionMode 
MapMode         mapMode
uint32          width
uint32          height
uint32          actionCount 

versionCompat   Version and size of the header record.

compressionMode ... FIXME

mapMode         MapMode for the ... FIXME

width           Width of the picture in logical coordinates.

height          Height of the picture in logical coordinates.

actionCount     Number of Actions in the file.


2.2.1.3 Point

struct Point {
    uint32 x;
    uint32 y;
}


2.2.2 Graphics Objects
- - - - - - - - - - - -
FIXME


2.2.3 Structure Objects
- - - - - - - - - - - -
FIXME


2.3 SVM Actions
---------------



2.3.1 Control Action Types
- - - - - - - - - - - - - - 
FIXME


2.3.2 Object Action Types
- - - - - - - - - - - - - - 
FIXME


2.3.3 Drawing Action Types
- - - - - - - - - - - - - - 
FIXME


2.3.4 Unsorted Action Types
- - - - - - - - - - - - - -

These action types have so far not being sorted into any other type. 

 META_NULL_ACTION
 META_PIXEL_ACTION
 META_POINT_ACTION
 META_LINE_ACTION
 META_RECT_ACTION
 META_ROUNDRECT_ACTION
 META_ELLIPSE_ACTION
 META_ARC_ACTION
 META_PIE_ACTION
 META_CHORD_ACTION
 META_POLYLINE_ACTION
 META_POLYGON_ACTION
 META_POLYPOLYGON_ACTION
 META_TEXT_ACTION
 META_TEXTARRAY_ACTION
 META_STRETCHTEXT_ACTION
 META_TEXTRECT_ACTION
 META_BMP_ACTION
 META_BMPSCALE_ACTION
 META_BMPSCALEPART_ACTION
 META_BMPEX_ACTION
 META_BMPEXSCALE_ACTION
 META_BMPEXSCALEPART_ACTION
 META_MASK_ACTION
 META_MASKSCALE_ACTION
 META_MASKSCALEPART_ACTION
 META_GRADIENT_ACTION
 META_HATCH_ACTION
 META_WALLPAPER_ACTION
 META_CLIPREGION_ACTION
 META_ISECTRECTCLIPREGION_ACTION
 META_ISECTREGIONCLIPREGION_ACTION
 META_MOVECLIPREGION_ACTION
 META_LINECOLOR_ACTION
 META_FILLCOLOR_ACTION
 META_TEXTCOLOR_ACTION
 META_TEXTFILLCOLOR_ACTION
 META_TEXTALIGN_ACTION
 META_MAPMODE_ACTION
 META_FONT_ACTION
 META_PUSH_ACTION
 META_POP_ACTION
 META_RASTEROP_ACTION
 META_TRANSPARENT_ACTION
 META_EPS_ACTION
 META_REFPOINT_ACTION
 META_TEXTLINECOLOR_ACTION
 META_TEXTLINE_ACTION
 META_FLOATTRANSPARENT_ACTION
 META_GRADIENTEX_ACTION
 META_LAYOUTMODE_ACTION
 META_TEXTLANGUAGE_ACTION
 META_OVERLINECOLOR_ACTION
 META_COMMENT_ACTION
