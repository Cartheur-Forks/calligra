--- plugins/textshape/dialogs/SimpleParagraphWidget.cpp	(revision 1146719)
+++ plugins/textshape/dialogs/SimpleParagraphWidget.cpp	(working copy)
@@ -1,6 +1,6 @@
 /* This file is part of the KDE project
  * Copyright (C) 2007, 2008, 2010 Thomas Zander <zander@kde.org>
- * Copyright (C) 2009 Casper Boemann <cbo@boemann.dk>
+ * Copyright (C) 2009-2010 Casper Boemann <cbo@boemann.dk>
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
@@ -17,10 +17,11 @@
  * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
  * Boston, MA 02110-1301, USA.
  */
-#include "SimpleStyleWidget.h"
+#include "SimpleParagraphWidget.h"
 #include "TextTool.h"
 #include "../ListItemsHelper.h"
 #include "../commands/ChangeListCommand.h"
+#include "ListStyleButton.h"
 
 #include <KAction>
 #include <KoTextBlockData.h>
@@ -33,19 +34,14 @@
 
 #include <QTextLayout>
 
-SimpleStyleWidget::SimpleStyleWidget(TextTool *tool, QWidget *parent)
+SimpleParagraphWidget::SimpleParagraphWidget(TextTool *tool, QWidget *parent)
         : QWidget(parent),
         m_blockSignals(false),
-        m_comboboxHasBidiItems(false),
-        m_tool(tool),
-        m_directionButtonState(Auto),
-        m_quickApplyListStyle(KoListStyle::DiscItem)
+        m_tool(tool)
 {
     widget.setupUi(this);
-    widget.bold->setDefaultAction(tool->action("format_bold"));
-    widget.italic->setDefaultAction(tool->action("format_italic"));
-    widget.strikeOut->setDefaultAction(tool->action("format_strike"));
-    widget.underline->setDefaultAction(tool->action("format_underline"));
+    widget.alignCenter->setDefaultAction(tool->action("format_aligncenter"));
+    widget.alignBlock->setDefaultAction(tool->action("format_alignblock"));
     // RTL layout will reverse the button order, but the align left/right then get mixed up.
     // this makes sure that whatever happens the 'align left' is to the left of the 'align right'
     if (QApplication::isRightToLeft()) {
@@ -56,162 +52,26 @@
         widget.alignRight->setDefaultAction(tool->action("format_alignright"));
     }
 
-    widget.textColor->setDefaultAction(tool->action("format_textcolor"));
-    widget.backgroundColor->setDefaultAction(tool->action("format_backgroundcolor"));
-    widget.alignCenter->setDefaultAction(tool->action("format_aligncenter"));
-    widget.alignBlock->setDefaultAction(tool->action("format_alignblock"));
-    widget.superscript->setDefaultAction(tool->action("format_super"));
-    widget.subscript->setDefaultAction(tool->action("format_sub"));
     widget.decreaseIndent->setDefaultAction(tool->action("format_decreaseindent"));
     widget.increaseIndent->setDefaultAction(tool->action("format_increaseindent"));
 
-    QComboBox *family = qobject_cast<QComboBox*> (tool->action("format_fontfamily")->requestWidget(this));
-    if (family) { // kdelibs 4.1 didn't return anything here.
-        widget.fontsFrame->addWidget(family);
-        connect(family, SIGNAL(activated(int)), this, SIGNAL(doneWithFocus()));
-    }
-    QComboBox *size = qobject_cast<QComboBox*> (tool->action("format_fontsize")->requestWidget(this));
-    if (size) { // kdelibs 4.1 didn't return anything here.
-        widget.fontsFrame->addWidget(size);
-        connect(size, SIGNAL(activated(int)), this, SIGNAL(doneWithFocus()));
-    }
+    connect(widget.quickTable, SIGNAL(create(int, int)), this, SIGNAL(insertTableQuick(int, int)));
 
-    fillListsCombobox();
+    widget.bulletListButton->setDefaultAction(tool->action("format_bulletlist"));
+    widget.numberedListButton->setDefaultAction(tool->action("format_numberlist"));
 
-    connect(widget.listType, SIGNAL(activated(int)), this, SLOT(listStyleChanged(int)));
+    //widget.bulletListButton->setIconSize(QSize(16,16));
+    //widget.numberedListButton->setIconSize(QSize(16,16));
+    fillListButtons();
+
+    connect(widget.bulletListButton, SIGNAL(itemTriggered(int)), this, SLOT(listStyleChanged(int)));
+    connect(widget.numberedListButton, SIGNAL(itemTriggered(int)), this, SLOT(listStyleChanged(int)));
     connect(widget.reversedText, SIGNAL(clicked()), this, SLOT(directionChangeRequested()));
-    connect(widget.listStyleAgain, SIGNAL(clicked()), this, SLOT(applyAgainPressed()));
 }
 
-void SimpleStyleWidget::fillListsCombobox()
-{
-    if (widget.listType->count() > 0 && (m_comboboxHasBidiItems || !m_tool->isBidiDocument()))
-        return;
 
-    widget.listType->clear();
-    KoZoomHandler zoomHandler;
-    zoomHandler.setZoomAndResolution(160, 72, 72);
-
-    KoInlineTextObjectManager itom;
-    TextShape textShape(&itom);
-    textShape.setSize(QSizeF(300, 100));
-    KoTextDocumentLayout *layouter = qobject_cast<KoTextDocumentLayout*> (textShape.textShapeData()->document()->documentLayout());
-    Q_ASSERT(layouter);
-    foreach(const Lists::ListStyleItem &item, Lists::genericListStyleItems()) {
-        if (item.style == KoListStyle::None) {
-            widget.listType->addItem(item.name, static_cast<int>(item.style));
-            continue;
-        }
-        QPixmap pixmap(16, 16); // can we get the actual size from the style?
-        pixmap.fill(Qt::transparent);
-        QPainter p(&pixmap);
-        KoListStyle listStyle;
-        KoListLevelProperties llp = listStyle.levelProperties(1);
-        llp.setStyle(item.style);
-        if (KoListStyle::isNumberingStyle(item.style)) {
-            llp.setStartValue(1);
-            llp.setListItemSuffix(".");
-        } else {
-            p.setRenderHint(QPainter::Antialiasing);
-        }
-        listStyle.setLevelProperties(llp);
-        listStyle.applyStyle(textShape.textShapeData()->document()->begin(),1);
-        layouter->layout();
-        textShape.paintComponent(p, zoomHandler);
-        p.end();
-
-        widget.listType->addItem(QIcon(pixmap), item.name, static_cast<int>(item.style));
-        if (item.style == m_quickApplyListStyle) {
-            widget.listStyleAgain->setIcon(QIcon(pixmap));
-        }
-    }
-    if (m_tool->isBidiDocument()) {
-        foreach(const Lists::ListStyleItem &item, Lists::otherListStyleItems())
-            widget.listType->addItem(item.name, static_cast<int>(item.style));
-        m_comboboxHasBidiItems = true;
-    }
-}
-
-void SimpleStyleWidget::setCurrentBlock(const QTextBlock &block)
+void SimpleParagraphWidget::directionChangeRequested()
 {
-    m_currentBlock = block;
-    m_blockSignals = true;
-    struct Finally {
-        Finally(SimpleStyleWidget *p) {
-            parent = p;
-        }
-        ~Finally() {
-            parent->m_blockSignals = false;
-        }
-        SimpleStyleWidget *parent;
-    };
-    Finally finally(this);
-
-    widget.reversedText->setVisible(m_tool->isBidiDocument());
-    QTextLayout *layout = block.layout();
-    if (layout) {
-        switch (layout->textOption().textDirection()) {
-        case Qt::LeftToRight: updateDirection(LTR); break;
-        case Qt::RightToLeft: updateDirection(RTL); break;
-        }
-    }
-
-    //  rest of function is lists stuff. Don't add anything else down here.
-    fillListsCombobox();
-
-    QTextList *list = block.textList();
-    if (list == 0) {
-        widget.listType->setCurrentIndex(0); // the item 'NONE'
-        return;
-    }
-
-    // TODO get style override from the bf and use that for the QTextListFormat
-    //QTextBlockFormat bf = block.format();
-    //bf.intProperty(KoListStyle::StyleOverride));
-
-    QTextListFormat format = list->format();
-    int style = format.intProperty(QTextListFormat::ListStyle);
-    for (int i = 0; i < widget.listType->count(); i++) {
-        if (widget.listType->itemData(i).toInt() == style) {
-            widget.listType->setCurrentIndex(i);
-            return;
-        }
-    }
-
-    foreach(const Lists::ListStyleItem & item, Lists::otherListStyleItems()) {
-        if (item.style == style) {
-            widget.listType->addItem(item.name, static_cast<int>(item.style));
-            widget.listType->setCurrentIndex(widget.listType->count() - 1);
-            return;
-        }
-    }
-}
-
-void SimpleStyleWidget::setStyleManager(KoStyleManager *sm)
-{
-    m_styleManager = sm;
-}
-
-void SimpleStyleWidget::setCurrentFormat(const QTextCharFormat& format)
-{
-    Q_UNUSED(format);
-}
-
-void SimpleStyleWidget::listStyleChanged(int row)
-{
-    if (m_blockSignals) return;
-
-    KoListStyle::Style newStyle = static_cast<KoListStyle::Style>(widget.listType->itemData(row).toInt());
-    m_tool->addCommand(new ChangeListCommand(m_tool->cursor(), newStyle, 0 /* level*/));
-    if (m_quickApplyListStyle != newStyle && newStyle != KoListStyle::None) {
-        m_quickApplyListStyle = newStyle;
-        widget.listStyleAgain->setIcon(widget.listType->itemIcon(row));
-    }
-    emit doneWithFocus();
-}
-
-void SimpleStyleWidget::directionChangeRequested()
-{
     QTextCursor cursor = m_tool->cursor();
     QTextBlockFormat format;
     KoText::Direction dir = static_cast<KoText::Direction>(m_currentBlock.blockFormat()
@@ -251,7 +111,7 @@
     emit doneWithFocus();
 }
 
-void SimpleStyleWidget::updateDirection(DirectionButtonState state)
+void SimpleParagraphWidget::updateDirection(DirectionButtonState state)
 {
     if (m_directionButtonState == state) return;
     m_directionButtonState = state;
@@ -271,16 +131,87 @@
     widget.reversedText->setText(buttonText);
 }
 
-void SimpleStyleWidget::applyAgainPressed()
+void SimpleParagraphWidget::fillListButtons()
 {
-    // change combobox
-    for (int row=0; row < widget.listType->count(); ++row) {
-        if (widget.listType->itemData(row).toInt() == m_quickApplyListStyle) {
-            widget.listType->setCurrentIndex(row);
-            listStyleChanged(row);
+    KoZoomHandler zoomHandler;
+    zoomHandler.setZoomAndResolution(160, 72, 72);
+
+    KoInlineTextObjectManager itom;
+    TextShape textShape(&itom);
+    textShape.setSize(QSizeF(300, 100));
+    QTextCursor cursor (textShape.textShapeData()->document());
+    foreach(Lists::ListStyleItem item, Lists::genericListStyleItems()) {
+        QPixmap pm(16,16);
+
+        pm.fill(Qt::transparent);
+        QPainter p(&pm);
+
+        p.translate(0, -1.5);
+        p.setRenderHint(QPainter::Antialiasing);
+        if(item.style != KoListStyle::None) {
+            KoListStyle listStyle;
+            KoListLevelProperties llp = listStyle.levelProperties(1);
+            llp.setStyle(item.style);
+            if (KoListStyle::isNumberingStyle(item.style)) {
+                llp.setStartValue(1);
+                llp.setListItemSuffix(".");
+            }
+            listStyle.setLevelProperties(llp);
+            cursor.select(QTextCursor::Document);
+            cursor.insertText("--");
+            listStyle.applyStyle(cursor.block(),1);
+            cursor.insertText("\n--");
+            cursor.insertText("\n--");
+            dynamic_cast<KoTextDocumentLayout*> (textShape.textShapeData()->document()->documentLayout())->layout();
+
+            textShape.paintComponent(p, zoomHandler);
+            if(listStyle.isNumberingStyle(item.style)) {
+                widget.numberedListButton->addItem(pm, static_cast<int> (item.style));
+            } else {
+                widget.bulletListButton->addItem(pm, static_cast<int> (item.style));
+            }
+        }
+    }
+}
+
+void SimpleParagraphWidget::setCurrentBlock(const QTextBlock &block)
+{
+    m_currentBlock = block;
+    m_blockSignals = true;
+    struct Finally {
+        Finally(SimpleParagraphWidget *p) {
+            parent = p;
+        }
+        ~Finally() {
+            parent->m_blockSignals = false;
+        }
+        SimpleParagraphWidget *parent;
+    };
+    Finally finally(this);
+
+    widget.reversedText->setVisible(m_tool->isBidiDocument());
+    QTextLayout *layout = block.layout();
+    if (layout) {
+        switch (layout->textOption().textDirection()) {
+        case Qt::LeftToRight: updateDirection(LTR); break;
+        case Qt::RightToLeft: updateDirection(RTL); break;
+        default:
             break;
         }
     }
 }
 
-#include <SimpleStyleWidget.moc>
+void SimpleParagraphWidget::setStyleManager(KoStyleManager *sm)
+{
+    m_styleManager = sm;
+}
+
+void SimpleParagraphWidget::listStyleChanged(int id)
+{
+    if (m_blockSignals) return;
+
+    m_tool->addCommand( new ChangeListCommand (m_tool->cursor(), static_cast<KoListStyle::Style> (id)));
+    emit doneWithFocus();
+}
+
+#include <SimpleParagraphWidget.moc>
