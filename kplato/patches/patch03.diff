Index: kptcommand.cc
===================================================================
--- kptcommand.cc	(revision 539609)
+++ kptcommand.cc	(working copy)
@@ -915,74 +915,116 @@
     setCommandType(1);
 }
 
-ModifyEffortCmd::ModifyEffortCmd(Part *part, Effort *effort, Duration oldvalue, Duration newvalue, QString name)
+ModifyEffortCmd::ModifyEffortCmd(Part *part, Node &node, Duration oldvalue, Duration newvalue, QString name)
     : NamedCommand(part, name),
-      m_effort(effort),
+      m_effort(node.effort()),
       m_oldvalue(oldvalue),
       m_newvalue(newvalue) {
+
+    QIntDictIterator<Schedule> it = node.schedules();
+    for (; it.current(); ++it) {
+        addSchScheduled(it.current());
+    }
 }
 void ModifyEffortCmd::execute() {
     m_effort->set(m_newvalue);
-    
+    setSchScheduled(false);
     setCommandType(1);
 }
 void ModifyEffortCmd::unexecute() {
     m_effort->set(m_oldvalue);
-    
+    setSchScheduled();
     setCommandType(1);
 }
 
-EffortModifyOptimisticRatioCmd::EffortModifyOptimisticRatioCmd(Part *part, Effort *effort, int oldvalue, int newvalue, QString name)
+EffortModifyOptimisticRatioCmd::EffortModifyOptimisticRatioCmd(Part *part, Node &node, int oldvalue, int newvalue, QString name)
     : NamedCommand(part, name),
-      m_effort(effort),
+      m_effort(node.effort()),
       m_oldvalue(oldvalue),
       m_newvalue(newvalue) {
+
+    QIntDictIterator<Schedule> it = node.schedules();
+    for (; it.current(); ++it) {
+        addSchScheduled(it.current());
+    }
 }
 void EffortModifyOptimisticRatioCmd::execute() {
     m_effort->setOptimisticRatio(m_newvalue);
-    
+    setSchScheduled(false);
     setCommandType(1);
 }
 void EffortModifyOptimisticRatioCmd::unexecute() {
     m_effort->setOptimisticRatio(m_oldvalue);
-    
+    setSchScheduled();
     setCommandType(1);
 }
 
-EffortModifyPessimisticRatioCmd::EffortModifyPessimisticRatioCmd(Part *part, Effort *effort, int oldvalue, int newvalue, QString name)
+EffortModifyPessimisticRatioCmd::EffortModifyPessimisticRatioCmd(Part *part, Node &node, int oldvalue, int newvalue, QString name)
     : NamedCommand(part, name),
-      m_effort(effort),
+      m_effort(node.effort()),
       m_oldvalue(oldvalue),
       m_newvalue(newvalue) {
+
+    QIntDictIterator<Schedule> it = node.schedules();
+    for (; it.current(); ++it) {
+        addSchScheduled(it.current());
+    }
 }
 void EffortModifyPessimisticRatioCmd::execute() {
     m_effort->setPessimisticRatio(m_newvalue);
-    
+    setSchScheduled(false);
     setCommandType(1);
 }
 void EffortModifyPessimisticRatioCmd::unexecute() {
     m_effort->setPessimisticRatio(m_oldvalue);
-    
+    setSchScheduled();
     setCommandType(1);
 }
 
-ModifyEffortTypeCmd::ModifyEffortTypeCmd(Part *part, Effort *effort, int oldvalue, int newvalue, QString name)
+ModifyEffortTypeCmd::ModifyEffortTypeCmd(Part *part, Node &node, int oldvalue, int newvalue, QString name)
     : NamedCommand(part, name),
-      m_effort(effort),
+      m_effort(node.effort()),
       m_oldvalue(oldvalue),
       m_newvalue(newvalue) {
+    
+    QIntDictIterator<Schedule> it = node.schedules();
+    for (; it.current(); ++it) {
+        addSchScheduled(it.current());
+    }
 }
 void ModifyEffortTypeCmd::execute() {
     m_effort->setType(static_cast<Effort::Type>(m_newvalue));
-    
+    setSchScheduled(false);
     setCommandType(1);
 }
 void ModifyEffortTypeCmd::unexecute() {
     m_effort->setType(static_cast<Effort::Type>(m_oldvalue));
-    
+    setSchScheduled();
     setCommandType(1);
 }
 
+EffortModifyRiskCmd::EffortModifyRiskCmd(Part *part, Node &node, int oldvalue, int newvalue, QString name)
+    : NamedCommand(part, name),
+      m_effort(node.effort()),
+      m_oldvalue(oldvalue),
+      m_newvalue(newvalue) {
+
+    QIntDictIterator<Schedule> it = node.schedules();
+    for (; it.current(); ++it) {
+        addSchScheduled(it.current());
+    }
+}
+void EffortModifyRiskCmd::execute() {
+    m_effort->setRisktype(static_cast<Effort::Risktype>(m_newvalue));
+    setSchScheduled(false);
+    setCommandType(1);
+}
+void EffortModifyRiskCmd::unexecute() {
+    m_effort->setRisktype(static_cast<Effort::Risktype>(m_oldvalue));
+    setSchScheduled();
+    setCommandType(1);
+}
+
 AddResourceGroupRequestCmd::AddResourceGroupRequestCmd(Part *part, Task &task, ResourceGroupRequest *request, QString name)
     : NamedCommand(part, name),
       m_task(task),
Index: kptresource.h
===================================================================
--- kptresource.h	(revision 546115)
+++ kptresource.h	(working copy)
@@ -321,7 +321,7 @@
     /// Take, don't delete.
     void takeSchedule(const Schedule *schedule);
     void addSchedule(Schedule *schedule);
-    ResourceSchedule *createSchedule(QString name, int type, int id);
+    ResourceSchedule *createSchedule(QString name, int type, long id);
     ResourceSchedule *createSchedule(Schedule *parent);
     
 protected:
Index: kpttaskgeneralpanel.cc
===================================================================
--- kpttaskgeneralpanel.cc	(revision 539609)
+++ kpttaskgeneralpanel.cc	(working copy)
@@ -105,7 +105,7 @@
     setEstimate(task.effort()->expected()); 
     setOptimistic(task.effort()->optimisticRatio());
     setPessimistic(task.effort()->pessimisticRatio());
-    
+    setRisktype(task.effort()->risktype());
     namefield->setFocus();
 }
 
@@ -150,26 +150,30 @@
     }
     int et = estimationType();
     if (et != m_task.effort()->type()) {
-        cmd->addCommand(new ModifyEffortTypeCmd(part, m_task.effort(),  m_task.effort()->type(), et));
+        cmd->addCommand(new ModifyEffortTypeCmd(part, m_task,  m_task.effort()->type(), et));
         modified = true;
     }
     dt = estimationValue();
     kdDebug()<<k_funcinfo<<"Estimate: "<<dt.toString()<<endl;
     bool expchanged = dt != m_task.effort()->expected();
     if ( expchanged ) {
-        cmd->addCommand(new ModifyEffortCmd(part, m_task.effort(), m_task.effort()->expected(), dt));
+        cmd->addCommand(new ModifyEffortCmd(part, m_task, m_task.effort()->expected(), dt));
         modified = true;
     }
     int x = optimistic();
     if ( x != m_task.effort()->optimisticRatio() || expchanged) {
-        cmd->addCommand(new EffortModifyOptimisticRatioCmd(part, m_task.effort(), m_task.effort()->optimisticRatio(), x));
+        cmd->addCommand(new EffortModifyOptimisticRatioCmd(part, m_task, m_task.effort()->optimisticRatio(), x));
         modified = true;
     }
     x = pessimistic();
     if ( x != m_task.effort()->pessimisticRatio() || expchanged) {
-        cmd->addCommand(new EffortModifyPessimisticRatioCmd(part, m_task.effort(), m_task.effort()->pessimisticRatio(), x));
+        cmd->addCommand(new EffortModifyPessimisticRatioCmd(part, m_task, m_task.effort()->pessimisticRatio(), x));
         modified = true;
     }
+    if (m_task.effort()->risktype() != risktype()) {
+        cmd->addCommand(new EffortModifyRiskCmd(part, m_task, m_task.effort()->risktype(), risktype()));
+        modified = true;
+    }
     if (!modified) {
         delete cmd;
         return 0;
@@ -239,6 +243,7 @@
     connect(optimisticValue, SIGNAL(valueChanged(int)), SLOT(checkAllFieldsFilled()));
     connect(pessimisticValue, SIGNAL(valueChanged(int)), SLOT(checkAllFieldsFilled()));
     connect(descriptionfield, SIGNAL(textChanged()), SLOT(checkAllFieldsFilled()));
+    connect(risk, SIGNAL(activated(int)), SLOT(checkAllFieldsFilled()));
 }
 
 void TaskGeneralPanelImpl::setSchedulingType(int type)
@@ -544,8 +549,18 @@
     scheduleEndDate->setDate(date);
 }
 
+void TaskGeneralPanelImpl::setRisktype( int r )
+{
+    risk->setCurrentItem(r);
+}
 
+int TaskGeneralPanelImpl::risktype() const
+{
+    return risk->currentItem();
+}
 
+
+
 }  //KPlato namespace
 
 #include "kpttaskgeneralpanel.moc"
Index: kptnode.h
===================================================================
--- kptnode.h	(revision 546115)
+++ kptnode.h	(working copy)
@@ -568,18 +568,15 @@
     void setType(Type type) { m_type = type; }
     void setType(QString type);
     QString typeToString() const;
+    
+    enum Risktype { Risk_None, Risk_Low, Risk_High };
+    Risktype risktype() const { return m_risktype; }
+    void setRisktype(Risktype type) { m_risktype = type; }
+    void setRisktype(QString type);
+    QString risktypeToString() const;
 
     enum Use { Use_Expected=0, Use_Optimistic=1, Use_Pessimistic=2 };
-    const Duration& effort(int use) {
-        if (use == Effort::Use_Expected)
-            return m_expectedEffort;
-        else if (use == Effort::Use_Optimistic)
-            return m_optimisticEffort;
-        else if (use == Effort::Use_Pessimistic)
-            return m_pessimisticEffort;
-        
-        return m_expectedEffort; // default
-    }
+    Duration effort(int use) const;
     const Duration& optimistic() const {return m_optimisticEffort;}
     const Duration& pessimistic() const {return m_pessimisticEffort;}
     const Duration& expected() const {return m_expectedEffort;}
@@ -618,12 +615,18 @@
      */
     static const Effort zeroEffort;
 
+    Duration variance() const;
+    Duration pertExpected() const;
+    Duration pertOptimistic() const;
+    Duration pertPessimistic() const;
+
 private:
     Duration m_optimisticEffort;
     Duration m_pessimisticEffort;
     Duration m_expectedEffort;
 
     Type m_type;
+    Risktype m_risktype;
     
 #ifndef NDEBUG
 public:
Index: kptschedule.cc
===================================================================
--- kptschedule.cc	(revision 539609)
+++ kptschedule.cc	(working copy)
@@ -41,7 +41,9 @@
 }
 
 Schedule::Schedule(Schedule *parent)
-    : m_deleted(false),
+    : m_type(Expected),
+      m_id(0),
+      m_deleted(false),
       m_appointments(),
       m_parent(parent) {
 
@@ -136,7 +138,6 @@
     m_name = sch.attribute("name");
     setType(sch.attribute("type"));
     m_id = sch.attribute("id").toLong();
-    
     return true;
 }
 
@@ -349,11 +350,6 @@
       m_node(node) {
     
     //kdDebug()<<k_funcinfo<<"node name: "<<node->name()<<endl;
-    if (parent) {
-        m_name = parent->name();
-        m_type = parent->type();
-        m_id = parent->id();
-    }
     init();
 }
 
@@ -477,15 +473,10 @@
 }
 
 ResourceSchedule::ResourceSchedule(Schedule *parent, Resource *resource)
-    : Schedule(),
+    : Schedule(parent),
       m_resource(resource),
       m_parent(parent) {
     //kdDebug()<<k_funcinfo<<"resource: "<<resource->name()<<endl;
-    if (parent) {
-        m_name = parent->name();
-        m_type = parent->type();
-        m_id = parent->id();
-    }
 }
 
 ResourceSchedule::~ResourceSchedule() {
Index: kptschedule.h
===================================================================
--- kptschedule.h	(revision 539609)
+++ kptschedule.h	(working copy)
@@ -173,6 +173,7 @@
     friend class Task;
     friend class Project;
     friend class Resource;
+    friend class RecalculateProjectCmd;
     /** 
       * earliestStart is calculated by PERT/CPM.
       * A task may be scheduled to start later because of constraints
@@ -217,7 +218,6 @@
     DateTime workEndTime;
     bool inCriticalPath;
 
-
 #ifndef NDEBUG
 public:
     virtual void printDebug(QString ident);
Index: kptnode.cc
===================================================================
--- kptnode.cc	(revision 539609)
+++ kptnode.cc	(working copy)
@@ -361,6 +361,7 @@
         return Duration::zeroDuration;
         kdError()<<k_funcinfo<<"No current schedule"<<endl;
     }
+    kdDebug()<<k_funcinfo<<m_name<<": Use="<<use<<endl;
     return calcDuration(time, m_effort->effort(use), backward);
 }
 
@@ -774,11 +775,13 @@
   m_pessimisticEffort = p;
   m_optimisticEffort = o;
   m_type = Type_Effort;
+  m_risktype = Risk_None;
 }
 
 Effort::Effort(const Effort &effort) {
     set(effort.expected(), effort.pessimistic(), effort.optimistic());
     setType(effort.type());
+    setRisktype(effort.risktype());
 }
 
 Effort::~Effort() {
@@ -817,11 +820,47 @@
     m_expectedEffort.get(days, hours, minutes);
 }
 
+Duration Effort::variance() const {
+    return (m_pessimisticEffort - m_optimisticEffort)/6;
+}
+Duration Effort::pertExpected() const {
+    if (m_risktype == Risk_Low) {
+        return (m_optimisticEffort + m_pessimisticEffort + (m_expectedEffort*4))/6;
+    } else if (m_risktype == Risk_High) {
+        return (m_optimisticEffort + (m_pessimisticEffort*2) + (m_expectedEffort*4))/7;
+    }
+    return m_expectedEffort; // risk==none
+}
+Duration Effort::pertOptimistic() const {
+    if (m_risktype != Risk_None) {
+        return pertExpected() - variance();
+    }
+    return m_optimisticEffort;
+}
+Duration Effort::pertPessimistic() const {
+    if (m_risktype != Risk_None) {
+        return pertExpected() + variance();
+    }
+    return m_pessimisticEffort;
+}
+
+Duration Effort::effort(int use) const {
+    if (use == Effort::Use_Expected) {
+        return pertExpected();
+    } else if (use == Effort::Use_Optimistic) {
+        return pertOptimistic();
+    } else if (use == Effort::Use_Pessimistic)
+        return pertPessimistic();
+    
+    return m_expectedEffort; // default
+}
+
 bool Effort::load(QDomElement &element) {
     m_expectedEffort = Duration::fromString(element.attribute("expected"));
     m_optimisticEffort = Duration::fromString(element.attribute("optimistic"));
     m_pessimisticEffort = Duration::fromString(element.attribute("pessimistic"));
     setType(element.attribute("type", "WorkBased"));
+    setRisktype(element.attribute("risk"));
     return true;
 }
 
@@ -832,6 +871,7 @@
     me.setAttribute("optimistic", m_optimisticEffort.toString());
     me.setAttribute("pessimistic", m_pessimisticEffort.toString());
     me.setAttribute("type", typeToString());
+    me.setAttribute("risk", risktypeToString());
 }
 
 QString Effort::typeToString() const {
@@ -852,6 +892,26 @@
         setType(Type_Effort); // default
 }
 
+QString Effort::risktypeToString() const {
+    if (m_risktype == Risk_None)
+        return QString("None");
+    if (m_risktype == Risk_Low)
+        return QString("Low");
+    if (m_risktype == Risk_High)
+        return QString("High");
+
+    return QString();
+}
+
+void Effort::setRisktype(QString type) {
+    if (type == "High")
+        setRisktype(Risk_High);
+    else if (type == "Low")
+        setRisktype(Risk_Low);
+    else
+        setRisktype(Risk_None); // default
+}
+
 void Effort::setOptimisticRatio(int percent)
 {
     int p = percent>0 ? -percent : percent;
@@ -931,9 +991,15 @@
 void Effort::printDebug(QCString indent) {
     kdDebug()<<indent<<"  Effort:"<<endl;
     indent += "  ";
-    kdDebug()<<indent<<"  Expected: "<<m_expectedEffort.toString()<<endl;
-    kdDebug()<<indent<<"  Optimistic: "<<m_optimisticEffort.toString()<<endl;
+    kdDebug()<<indent<<"  Expected:    "<<m_expectedEffort.toString()<<endl;
+    kdDebug()<<indent<<"  Optimistic:  "<<m_optimisticEffort.toString()<<endl;
     kdDebug()<<indent<<"  Pessimistic: "<<m_pessimisticEffort.toString()<<endl;
+    
+    kdDebug()<<indent<<"  Risk: "<<risktypeToString()<<endl;
+    kdDebug()<<indent<<"  Pert expected:    "<<pertExpected().toString()<<endl;
+    kdDebug()<<indent<<"  Pert optimistic:  "<<pertOptimistic().toString()<<endl;
+    kdDebug()<<indent<<"  Pert pessimistic: "<<pertPessimistic().toString()<<endl;
+    kdDebug()<<indent<<"  Pert variance:    "<<variance().toString()<<endl;
 }
 #endif
 
Index: kptresource.cc
===================================================================
--- kptresource.cc	(revision 539609)
+++ kptresource.cc	(working copy)
@@ -456,7 +456,7 @@
     m_schedules.replace(schedule->id(), schedule);
 }
 
-ResourceSchedule *Resource::createSchedule(QString name, int type, int id) {
+ResourceSchedule *Resource::createSchedule(QString name, int type, long id) {
     ResourceSchedule *sch = new ResourceSchedule(this, name, (Schedule::Type)type, id);
     addSchedule(sch);
     return sch;
Index: kptduration.h
===================================================================
--- kptduration.h	(revision 539609)
+++ kptduration.h	(working copy)
@@ -98,7 +98,7 @@
         Duration operator/(int unit) const;
         double operator/(const Duration &d) const;
         
-        Duration operator+(Duration &d) const
+        Duration operator+(const Duration &d) const
             {Duration dur(*this); dur.add(d); return dur; }
         Duration &operator+=(const Duration &d) {add(d); return *this; }
         
Index: kpttaskdefaultpanel.cc
===================================================================
--- kpttaskdefaultpanel.cc	(revision 539609)
+++ kpttaskdefaultpanel.cc	(working copy)
@@ -128,24 +128,24 @@
     }
     int et = estimationType();
     if (et != m_task.effort()->type()) {
-        cmd->addCommand(new ModifyEffortTypeCmd(part, m_task.effort(),  m_task.effort()->type(), et));
+        cmd->addCommand(new ModifyEffortTypeCmd(part, m_task,  m_task.effort()->type(), et));
         modified = true;
     }
     dt = estimationValue();
     kdDebug()<<k_funcinfo<<"Estimate: "<<dt.toString()<<endl;
     bool expchanged = dt != m_task.effort()->expected();
     if ( expchanged ) {
-        cmd->addCommand(new ModifyEffortCmd(part, m_task.effort(), m_task.effort()->expected(), dt));
+        cmd->addCommand(new ModifyEffortCmd(part, m_task, m_task.effort()->expected(), dt));
         modified = true;
     }
     int x = optimistic();
     if ( x != m_task.effort()->optimisticRatio() || expchanged) {
-        cmd->addCommand(new EffortModifyOptimisticRatioCmd(part, m_task.effort(), m_task.effort()->optimisticRatio(), x));
+        cmd->addCommand(new EffortModifyOptimisticRatioCmd(part, m_task, m_task.effort()->optimisticRatio(), x));
         modified = true;
     }
     x = pessimistic();
     if ( x != m_task.effort()->pessimisticRatio() || expchanged) {
-        cmd->addCommand(new EffortModifyPessimisticRatioCmd(part, m_task.effort(), m_task.effort()->pessimisticRatio(), x));
+        cmd->addCommand(new EffortModifyPessimisticRatioCmd(part, m_task, m_task.effort()->pessimisticRatio(), x));
         modified = true;
     }
     if (!modified) {
Index: kpttaskgeneralpanelbase.ui
===================================================================
--- kpttaskgeneralpanelbase.ui	(revision 539609)
+++ kpttaskgeneralpanelbase.ui	(working copy)
@@ -10,11 +10,11 @@
             <x>0</x>
             <y>0</y>
             <width>653</width>
-            <height>401</height>
+            <height>418</height>
         </rect>
     </property>
     <property name="caption">
-        <string></string>
+        <string>TaskGeneralPanelBase</string>
     </property>
     <vbox>
         <property name="name">
@@ -214,27 +214,6 @@
                 <property name="name">
                     <cstring>unnamed</cstring>
                 </property>
-                <widget class="KComboBox" row="2" column="1">
-                    <item>
-                        <property name="text">
-                            <string>Effort</string>
-                        </property>
-                    </item>
-                    <item>
-                        <property name="text">
-                            <string>Duration</string>
-                        </property>
-                    </item>
-                    <property name="name">
-                        <cstring>estimateType</cstring>
-                    </property>
-                    <property name="editable">
-                        <bool>false</bool>
-                    </property>
-                    <property name="urlDropsEnabled" stdset="0">
-                        <bool>false</bool>
-                    </property>
-                </widget>
                 <widget class="KComboBox" row="0" column="1">
                     <item>
                         <property name="text">
@@ -294,22 +273,6 @@
                         <cstring>scheduleType</cstring>
                     </property>
                 </widget>
-                <widget class="QLabel" row="2" column="0">
-                    <property name="name">
-                        <cstring>textLabel3_2</cstring>
-                    </property>
-                    <property name="sizePolicy">
-                        <sizepolicy>
-                            <hsizetype>0</hsizetype>
-                            <vsizetype>5</vsizetype>
-                            <horstretch>0</horstretch>
-                            <verstretch>0</verstretch>
-                        </sizepolicy>
-                    </property>
-                    <property name="text">
-                        <string>Estimate:</string>
-                    </property>
-                </widget>
                 <widget class="KDateWidget" row="0" column="2">
                     <property name="name">
                         <cstring>scheduleStartDate</cstring>
@@ -405,6 +368,106 @@
                         </widget>
                     </hbox>
                 </widget>
+                <widget class="QLabel" row="2" column="0">
+                    <property name="name">
+                        <cstring>textLabel3_2</cstring>
+                    </property>
+                    <property name="sizePolicy">
+                        <sizepolicy>
+                            <hsizetype>0</hsizetype>
+                            <vsizetype>5</vsizetype>
+                            <horstretch>0</horstretch>
+                            <verstretch>0</verstretch>
+                        </sizepolicy>
+                    </property>
+                    <property name="text">
+                        <string>Estimate:</string>
+                    </property>
+                </widget>
+                <widget class="KComboBox" row="2" column="1">
+                    <item>
+                        <property name="text">
+                            <string>Effort</string>
+                        </property>
+                    </item>
+                    <item>
+                        <property name="text">
+                            <string>Duration</string>
+                        </property>
+                    </item>
+                    <property name="name">
+                        <cstring>estimateType</cstring>
+                    </property>
+                    <property name="editable">
+                        <bool>false</bool>
+                    </property>
+                    <property name="urlDropsEnabled" stdset="0">
+                        <bool>false</bool>
+                    </property>
+                </widget>
+                <widget class="KComboBox" row="3" column="1">
+                    <item>
+                        <property name="text">
+                            <string>None</string>
+                        </property>
+                    </item>
+                    <item>
+                        <property name="text">
+                            <string>Low</string>
+                        </property>
+                    </item>
+                    <item>
+                        <property name="text">
+                            <string>High</string>
+                        </property>
+                    </item>
+                    <property name="name">
+                        <cstring>risk</cstring>
+                    </property>
+                    <property name="editable">
+                        <bool>false</bool>
+                    </property>
+                    <property name="urlDropsEnabled" stdset="0">
+                        <bool>false</bool>
+                    </property>
+                    <property name="toolTip" stdset="0">
+                        <string>Risk controles the PERT distribution used when calculating the actual estimate for this task.</string>
+                    </property>
+                    <property name="whatsThis" stdset="0">
+                        <string>&lt;p&gt;Risk controles the PERT distribution used when calculating the actual estimate for the task.
+&lt;b&gt;None&lt;/b&gt; means the Expected estimate is used as is.
+&lt;b&gt;Low risk&lt;/b&gt; means that a normal distribution is used.
+&lt;b&gt;High risk&lt;/b&gt; means that the estimate will be slightly pessimistic compared to Low risk.&lt;/p&gt;</string>
+                    </property>
+                </widget>
+                <widget class="QLabel" row="3" column="0">
+                    <property name="name">
+                        <cstring>textLabel3_2_3</cstring>
+                    </property>
+                    <property name="sizePolicy">
+                        <sizepolicy>
+                            <hsizetype>0</hsizetype>
+                            <vsizetype>5</vsizetype>
+                            <horstretch>0</horstretch>
+                            <verstretch>0</verstretch>
+                        </sizepolicy>
+                    </property>
+                    <property name="text">
+                        <string>Risk:</string>
+                    </property>
+                    <property name="buddy" stdset="0">
+                        <cstring>risk</cstring>
+                    </property>
+                    <property name="toolTip" stdset="0">
+                        <string>Risk controles the PERT distribution used when calculating the actual estimate for this task.</string>
+                    </property>
+                    <property name="whatsThis" stdset="0">
+                        <string>&lt;p&gt;Risk controles the PERT distribution used when calculating the actual estimate for the task.
+&lt;b&gt;None&lt;/b&gt; means the Expected estimate is used as is.
+&lt;b&gt;Low risk&lt;/b&gt; means that a normal distribution is used.
+&lt;b&gt;High risk&lt;/b&gt; means that the estimate will be slightly pessimistic compared to Low risk.&lt;/p&gt;</string>
+                    </property>
+                </widget>
             </grid>
         </widget>
         <widget class="QLabel">
@@ -464,6 +527,7 @@
     <tabstop>scheduleEndTime</tabstop>
     <tabstop>estimateType</tabstop>
     <tabstop>estimate</tabstop>
+    <tabstop>risk</tabstop>
     <tabstop>optimisticValue</tabstop>
     <tabstop>pessimisticValue</tabstop>
     <tabstop>descriptionfield</tabstop>
Index: kpttaskgeneralpanel.h
===================================================================
--- kpttaskgeneralpanel.h	(revision 539609)
+++ kpttaskgeneralpanel.h	(working copy)
@@ -51,7 +51,7 @@
     virtual QTime endTime();
     virtual QDate startDate();
     virtual QDate endDate();
-
+    virtual int risktype() const;
 public slots:
     virtual void setSchedulingType( int type );
     virtual void changeLeader();
@@ -77,6 +77,7 @@
     virtual void setEndDateTime( const QDateTime & dt );
     virtual void setStartDate( const QDate & date );
     virtual void setEndDate( const QDate & date );
+    virtual void setRisktype( int r );
 
 signals:
     void obligatedFieldsFilled( bool );
Index: kptpart.cc
===================================================================
--- kptpart.cc	(revision 539609)
+++ kptpart.cc	(working copy)
@@ -43,7 +43,7 @@
 #include <KoCommandHistory.h>
 #include <KoGlobal.h>
 
-#define CURRENT_SYNTAX_VERSION "0.4"
+#define CURRENT_SYNTAX_VERSION "0.5"
 
 namespace KPlato
 {
Index: kptcommand.h
===================================================================
--- kptcommand.h	(revision 539609)
+++ kptcommand.h	(working copy)
@@ -480,7 +480,7 @@
 class ModifyEffortCmd : public NamedCommand
 {
 public:
-    ModifyEffortCmd(Part *part, Effort *effort, Duration oldvalue, Duration newvalue, QString name=0);
+    ModifyEffortCmd(Part *part, Node &node, Duration oldvalue, Duration newvalue, QString name=0);
     void execute();
     void unexecute();
 
@@ -493,7 +493,7 @@
 class EffortModifyOptimisticRatioCmd : public NamedCommand
 {
 public:
-    EffortModifyOptimisticRatioCmd(Part *part, Effort *effort, int oldvalue, int newvalue, QString name=0);
+    EffortModifyOptimisticRatioCmd(Part *part, Node &node, int oldvalue, int newvalue, QString name=0);
     void execute();
     void unexecute();
 
@@ -506,7 +506,7 @@
 class EffortModifyPessimisticRatioCmd : public NamedCommand
 {
 public:
-    EffortModifyPessimisticRatioCmd(Part *part, Effort *effort, int oldvalue, int newvalue, QString name=0);
+    EffortModifyPessimisticRatioCmd(Part *part, Node &node, int oldvalue, int newvalue, QString name=0);
     void execute();
     void unexecute();
 
@@ -519,7 +519,7 @@
 class ModifyEffortTypeCmd : public NamedCommand
 {
 public:
-    ModifyEffortTypeCmd(Part *part, Effort *effort, int oldvalue, int newvalue, QString name=0);
+    ModifyEffortTypeCmd(Part *part, Node &node, int oldvalue, int newvalue, QString name=0);
     void execute();
     void unexecute();
 
@@ -529,6 +529,19 @@
 
 };
 
+class EffortModifyRiskCmd : public NamedCommand
+{
+public:
+    EffortModifyRiskCmd(Part *part, Node &node, int oldvalue, int newvalue, QString name=0);
+    void execute();
+    void unexecute();
+
+private:
+    Effort *m_effort;
+    int m_oldvalue, m_newvalue;
+
+};
+
 class AddResourceGroupRequestCmd : public NamedCommand
 {
 public:
