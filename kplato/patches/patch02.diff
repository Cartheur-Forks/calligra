Index: kptproject.h
===================================================================
--- kptproject.h	(revision 525262)
+++ kptproject.h	(working copy)
@@ -62,7 +62,7 @@
     /**
      * Calculate the whole project.
      *
-     * @param schedule Calculate using expected-, optimistic- or pessimistic estimate.
+     * @param use Calculate using expected-, optimistic- or pessimistic estimate.
      */
     void calculate(Effort::Use use);
     /// Calculate current schedule
Index: kptresource.h
===================================================================
--- kptresource.h	(revision 525262)
+++ kptresource.h	(working copy)
@@ -98,8 +98,11 @@
 	      Resource* getResource(int);
 	      Risk* getRisk(int);
 
-	      /** Get the @num resources which is available in the time frame
-            * defined by @start and @duration.
+	  /** Get the "num" resources which is available in the time frame
+            * defined by "start" and "duration".
+            * @param start todo 
+            * @param duration todo
+            * @param num todo
             */
           QPtrList<Resource> availableResources(const DateTime start, const Duration duration, int num);
 	      /** Manage the dependent resources.  This is a list of the resource
Index: kptaccount.h
===================================================================
--- kptaccount.h	(revision 525262)
+++ kptaccount.h	(working copy)
@@ -48,10 +48,23 @@
 class Account
 {
 public:
+
+    /**
+     * Constructor.
+     */
     Account();
+
+    /**
+     * 
+     */
     Account(QString name, QString description=QString::null);
-    ~Account();
+   
+    /**
+     * Destructor.
+     */
+     ~Account();
     
+
     QString name() const { return m_name; }
     void setName(QString name);
     
Index: kpttask.h
===================================================================
--- kpttask.h	(revision 525262)
+++ kpttask.h	(working copy)
@@ -136,35 +136,35 @@
      */
     void initiateCalculationLists(QPtrList<Node> &startnodes, QPtrList<Node> &endnodes, QPtrList<Node> &summarytasks);
     /**
-     * Calculates @ref m_durationForward from @ref earliestStart and
+     * Calculates ref m_durationForward from ref earliestStart and
      * returns the resulting end time, 
-     * which will be used as the succesors @ref earliestStart.
+     * which will be used as the succesors ref earliestStart.
      *
      * @param use Calculate using expected-, optimistic- or pessimistic estimate.
      */
     DateTime calculateForward(int use);
     /**
-     * Calculates @ref m_durationBackward from @ref latestFinish and
+     * Calculates ref m_durationBackward from ref latestFinish and
      * returns the resulting start time, 
-     * which will be used as the predecessors @ref latestFinish.
+     * which will be used as the predecessors ref latestFinish.
      *
      * @param use Calculate using expected-, optimistic- or pessimistic estimate.
      */
     DateTime calculateBackward(int use);
     /**
      * Schedules the task within the limits of earliestStart and latestFinish.
-     * Calculates @ref m_startTime, @ref m_endTime and @ref m_duration,
-     * Assumes @ref calculateForward() and @ref calculateBackward() has been run.
+     * Calculates ref m_startTime, ref m_endTime and ref m_duration,
+     * Assumes ref calculateForward() and ref calculateBackward() has been run.
      *
-     * @param latest The task is not scheduled to start earlier than this
+     * @param earliest The task is not scheduled to start earlier than this
      * @param use Calculate using expected-, optimistic- or pessimistic estimate.
      * @return The tasks endtime which can be used for scheduling the successor.
      */
     DateTime scheduleForward(const DateTime &earliest, int use);
     /**
      * Schedules the task within the limits of earliestStart and latestFinish.
-     * Calculates @ref m_startTime, @ref m_endTime and @ref m_duration,
-     * Assumes @ref calculateForward() and @ref calculateBackward() has been run.
+     * Calculates ref m_startTime, ref m_endTime and ref m_duration,
+     * Assumes ref calculateForward() and ref calculateBackward() has been run.
      *
      * @param latest The task is not scheduled to end later than this
      * @param use Calculate using expected-, optimistic- or pessimistic estimate.
Index: kptnode.h
===================================================================
--- kptnode.h	(revision 525262)
+++ kptnode.h	(working copy)
@@ -117,13 +117,13 @@
     // of the table-building node is the house-building node.
 
     int numDependChildNodes() const { return m_dependChildNodes.count(); }
-    /// Adds relation to both this node and @node
+    /// Adds relation to both this node and address node
     virtual void addDependChildNode( Node *node, Relation::Type p=Relation::FinishStart);
-    /// Adds relation to both this node and @node
+    /// Adds relation to both this node and address node
     virtual void addDependChildNode( Node *node, Relation::Type p, Duration lag);
     /// Adds relation only to this node
     virtual bool addDependChildNode( Relation *relation);
-    /// Inserts relation to this node at index @index and appends relation to @node
+    /// Inserts relation to this node at index address index and appends relation to address node
     virtual void insertDependChildNode( unsigned int index, Node *node, Relation::Type p=Relation::FinishStart);
     void delDependChildNode( Node *node, bool remove=false);
     void delDependChildNode( Relation *rel, bool remove=false);
@@ -353,7 +353,7 @@
      * dependent on use.
      * @param time Where to start calculation.
      * @param use Calculate using expected-, optimistic- or pessimistic estimate.
-     * @param Backward If true, time specifies when the task should end.
+     * @param backward If true, time specifies when the task should end.
      */
     Duration duration(const DateTime &time, int use, bool backward);
     // Reimplement this
@@ -504,12 +504,12 @@
     ConstraintType m_constraint;
 
     /**
-      * @m_constraintTime is used if any of the constraints
+      * m_constraintTime is used if any of the constraints
       * FixedInterval, StartNotEarlier, MustStartOn or FixedInterval is selected
       */
     DateTime m_constraintStartTime;
     /**
-      * @m_constraintEndTime is used if any of the constraints
+      * m_constraintEndTime is used if any of the constraints
       * FixedInterval, FinishNotLater, MustFinishOn or FixedInterval is selected
       */
     DateTime m_constraintEndTime;
@@ -594,21 +594,21 @@
 
     /**
      * Set the optimistic duration
-     * @percent should be a negativ value.
+     * @param percent should be a negativ value.
      */
     void setOptimisticRatio(int percent);
     /**
-     * Return the @optimistic duaration as deviation from @expected in percent.
+     * Return the "optimistic" duration as deviation from "expected" in percent.
      * This should be a negativ value.
      */
     int optimisticRatio() const;
     /**
      * Set the pessimistic duration
-     * @percent should be a positive value.
+     * @param percent should be a positive value.
      */
     void setPessimisticRatio(int percent);
     /**
-     * Return the @pessimistic duaration as the deviation from @expected in percent.
+     * Return the "pessimistic" duration as the deviation from "expected" in percent.
      * This should be a positive value.
      */
     int pessimisticRatio() const;
Index: kptcalendar.h
===================================================================
--- kptcalendar.h	(revision 525262)
+++ kptcalendar.h	(working copy)
@@ -122,8 +122,9 @@
     void addWeekday(CalendarDay *day) { m_weekdays.append(day); }
     const QPtrList<CalendarDay> &weekdays() const { return m_weekdays; }
     /**
-     * Returns the pointer to CalendarDay for @day or 0 if not defined. 
+     * Returns the pointer to CalendarDay for day or 0 if not defined. 
      * day is 0..6.
+     * @param day todo : add a comment
      */
     CalendarDay *weekday(int day) const;
     CalendarDay *weekday(const QDate &date) const { return weekday(date.dayOfWeek()-1); }
 
