Index: kptproject.h
===================================================================
--- kptproject.h	(revision 558331)
+++ kptproject.h	(working copy)
@@ -100,6 +100,8 @@
 
     bool addTask( Node* task, Node* position );
     bool addSubTask( Node* task, Node* position );
+    bool addSubTask( Node* task, int index, Node* parent );
+    void delTask(Node *node);
     bool canIndentTask(Node* node);
     bool indentTask( Node* node );
     bool canUnindentTask( Node* node );
@@ -173,11 +175,12 @@
     virtual Node *findNode(const QString &id) const 
         { return (m_parent ? m_parent->findNode(id) : nodeIdDict.find(id)); }
     /// Remove the node with identity id from the register
-    virtual bool removeId(const QString &id) 
-        { return (m_parent ? m_parent->removeId(id) : nodeIdDict.remove(id)); }
+    virtual bool removeId(const QString &id);
     /// Insert the node with identity id
-    virtual void insertId(const QString &id, const Node *node)
-        { m_parent ? m_parent->insertId(id, node) : nodeIdDict.insert(id, node); }
+    virtual void insertId(const QString &id, const Node *node);
+    /// Register node. The nodes id must be unique and non-empty.
+    bool Project::registerNodeId(Node *node);
+    /// Create a unique id.
     QString uniqueNodeId(int seed=1);
     
     ResourceGroup *findResourceGroup(const QString &id) const 
Index: kptcommand.cc
===================================================================
--- kptcommand.cc	(revision 558331)
+++ kptcommand.cc	(working copy)
@@ -341,9 +341,9 @@
     m_mine = false;
     m_appointments.setAutoDelete(true);
 
-    Node *p = node->projectNode();
-    if (p) {
-        QIntDictIterator<Schedule> it = p->schedules();
+    m_project = static_cast<Project*>(node->projectNode());
+    if (m_project) {
+        QIntDictIterator<Schedule> it = m_project->schedules();
         for (; it.current(); ++it) {
             Schedule *s = node->findSchedule(it.current()->id());
             if (s && s->isScheduled()) {
@@ -358,24 +358,23 @@
         delete m_node;
 }
 void NodeDeleteCmd::execute() {
-    if (m_parent) {
+    if (m_parent && m_project) {
         //kdDebug()<<k_funcinfo<<m_node->name()<<" "<<m_index<<endl;
         QPtrListIterator<Appointment> it = m_node->appointments();
         for (; it.current(); ++it) {
             it.current()->detach();
             m_appointments.append(it.current());
         }
-        m_parent->delChildNode(m_node, false/*take*/);
-        m_node->setParent(0);
+        m_project->delTask(m_node);
         m_mine = true;
         setSchScheduled(false);
         setCommandType(1);
     }
 }
 void NodeDeleteCmd::unexecute() {
-    if (m_parent) {
+    if (m_parent && m_project) {
         //kdDebug()<<k_funcinfo<<m_node->name()<<" "<<m_index<<endl;
-        m_parent->insertChildNode(m_index, m_node);
+        m_project->addSubTask(m_node, m_index, m_parent);
         Appointment *a;
         for (a = m_appointments.first(); a != 0; m_appointments.take()) {
             a->attach();
@@ -423,8 +422,7 @@
     setCommandType(1);
 }
 void TaskAddCmd::unexecute() {
-    m_node->getParent()->delChildNode(m_node, false/*take*/);
-    m_node->setParent(0);
+    m_project->delTask(m_node);
     m_added = false;
     
     setCommandType(1);
@@ -456,8 +454,7 @@
     setCommandType(1);
 }
 void SubtaskAddCmd::unexecute() {
-    m_parent->delChildNode(m_node, false/*take*/);
-    m_node->setParent(0);
+    m_project->delTask(m_node);
     m_added = false;
     
     setCommandType(1);
@@ -699,48 +696,43 @@
 NodeMoveUpCmd::NodeMoveUpCmd(Part *part, Node &node, QString name)
     : NamedCommand(part, name),
       m_node(node), 
-      m_newindex(-1) {
+      m_moved(false) {
+
+    m_project = static_cast<Project *>(m_node.projectNode());
 }
 void NodeMoveUpCmd::execute() {
-    m_oldindex = m_node.getParent()->findChildNode(&m_node);
-    Project *p = dynamic_cast<Project *>(m_node.projectNode());
-    if (p && p->moveTaskUp(&m_node)) {
-        m_newindex = m_node.getParent()->findChildNode(&m_node);
+    if (m_project) {
+        m_moved = m_project->moveTaskUp(&m_node);
     }
     
     setCommandType(0);
 }
 void NodeMoveUpCmd::unexecute() {
-    if (m_newindex != -1) {
-        m_node.getParent()->delChildNode(m_newindex, false);
-        m_node.getParent()->insertChildNode(m_oldindex, &m_node);
-        m_newindex = -1;
+    if (m_project && m_moved) {
+        m_project->moveTaskDown(&m_node);
     }
-    
+    m_moved = false;
     setCommandType(0);
 }
 
 NodeMoveDownCmd::NodeMoveDownCmd(Part *part, Node &node, QString name)
     : NamedCommand(part, name),
       m_node(node), 
-      m_newindex(-1) {
+      m_moved(false) {
+    
+    m_project = static_cast<Project *>(m_node.projectNode());
 }
 void NodeMoveDownCmd::execute() {
-    m_oldindex = m_node.getParent()->findChildNode(&m_node);
-    Project *p = dynamic_cast<Project *>(m_node.projectNode());
-    if (p && p->moveTaskDown(&m_node)) {
-        m_newindex = m_node.getParent()->findChildNode(&m_node);
+    if (m_project) {
+        m_moved = m_project->moveTaskDown(&m_node);
     }
-    
     setCommandType(0);
 }
 void NodeMoveDownCmd::unexecute() {
-    if (m_newindex != -1) {
-        m_node.getParent()->delChildNode(m_newindex, false);
-        m_node.getParent()->insertChildNode(m_oldindex, &m_node);
-        m_newindex = -1;
+    if (m_project && m_moved) {
+        m_project->moveTaskUp(&m_node);
     }
-    
+    m_moved = false;
     setCommandType(0);
 }
 
Index: kptproject.cc
===================================================================
--- kptproject.cc	(revision 558331)
+++ kptproject.cc	(working copy)
@@ -364,7 +364,9 @@
                 // Load the subproject
                 Project *child = new Project(this);
                 if (child->load(e)) {
-                    addChildNode(child);
+                    if (!addTask(child, this)) {
+                        delete child; // TODO: Complain about this
+                    }
                 } else {
                     // TODO: Complain about this
                     delete child;
@@ -375,7 +377,9 @@
                 // Depends on resources already loaded
                 Task *child = new Task(this);
                 if (child->load(e, *this)) {
-                    addChildNode(child);
+                    if (!addTask(child, this)) {
+                        delete child; // TODO: Complain about this
+                    }
                 } else {
                     // TODO: Complain about this
                     delete child;
@@ -576,8 +580,7 @@
 		kdDebug()<<k_funcinfo<<"Task not found???"<<endl;
 		return false;
 	}
-	parentNode->insertChildNode( index+1, task );
-    return true;
+	return addSubTask(task, index+1, parentNode);
 }
 
 bool Project::addSubTask( Node* task, Node* position )
@@ -585,13 +588,43 @@
 	// we want to add a subtask to the node "position". It will become
 	// position's last child.
 	if ( 0 == position ) {
-      kdError()<<k_funcinfo<<"No parent, can not add subtask: "<<task->name()<<endl;
-	  return false;
-	}
-	position->addChildNode(task);
+        kdError()<<k_funcinfo<<"No parent, can not add subtask: "<<task->name()<<endl;
+        return false;
+    }
+    if (!registerNodeId(task)) {
+        kdError()<<k_funcinfo<<"Failed to register node id, can not add subtask: "<<task->name()<<endl;
+        return false;
+    }
+    position->addChildNode(task);
     return true;
 }
 
+bool Project::addSubTask( Node* task, int index, Node* parent )
+{
+    // we want to add a subtask to the node "parent" at the given index.
+    if ( 0 == parent ) {
+        kdError()<<k_funcinfo<<"No parent, can not add subtask: "<<task->name()<<endl;
+        return false;
+    }
+    if (!registerNodeId(task)) {
+        kdError()<<k_funcinfo<<"Failed to register node id, can not add subtask: "<<task->name()<<endl;
+        return false;
+    }
+    parent->insertChildNode(index, task);
+    return true;
+}
+
+void Project::delTask(Node *node)
+{
+    Node *parent = node->getParent();
+    if (parent == 0) {
+        kdDebug()<<k_funcinfo<<"Node must have a parent!"<<endl;
+        return;
+    }
+    removeId(node->id());
+    parent->delChildNode(node, false/*take*/);
+}
+
 bool Project::canIndentTask(Node* node)
 {
     if (0 == node) {
@@ -752,6 +785,34 @@
     return QString("%1").arg(i);
 }
 
+bool Project::removeId(const QString &id) {
+    kdDebug()<<k_funcinfo<<"id="<<id<<endl;
+    return (m_parent ? m_parent->removeId(id) : nodeIdDict.remove(id)); 
+}
+
+void Project::insertId(const QString &id, const Node *node) {
+    kdDebug()<<k_funcinfo<<"id="<<id<<" "<<node->name()<<endl;
+    m_parent ? m_parent->insertId(id, node) : nodeIdDict.insert(id, node); 
+}
+
+bool Project::registerNodeId(Node *node) {
+    if (node->id().isEmpty()) {
+       kdError()<<k_funcinfo<<"Id is empty."<<endl;
+       return false;
+    }
+    Node *rn = findNode(node->id());
+    if (rn == 0) {
+       insertId(node->id(), node);
+       return true;
+    }
+    if (rn != node) {
+       kdError()<<k_funcinfo<<"Id allready exists for different task: "<<node->id()<<endl;
+       return false;
+    }
+    return true;
+}
+
+
 ResourceGroup *Project::group(QString id) {
     return findResourceGroup(id);
 }
Index: kptnode.cc
===================================================================
--- kptnode.cc	(revision 558331)
+++ kptnode.cc	(working copy)
@@ -120,42 +120,43 @@
 void Node::delChildNode( Node *node, bool remove) {
     //kdDebug()<<k_funcinfo<<"find="<<m_nodes.findRef(node)<<endl;
     if ( m_nodes.findRef(node) != -1 ) {
-        removeId(node->id());
         if(remove)
             m_nodes.remove();
         else
             m_nodes.take();
     }
+    node->setParent(0);
 }
 
 void Node::delChildNode( int number, bool remove) {
     Node *n = m_nodes.at(number);
-    if (n)
-        removeId(n->id());
+    //kdDebug()<<k_funcinfo<<(n?n->id():"null")<<" : "<<(n?n->name():"")<<endl;
     if(remove)
         m_nodes.remove(number);
     else
         m_nodes.take(number);
+    
+    if (n) {
+        n->setParent(0);
+    }
 }
 
 void Node::insertChildNode( unsigned int index, Node *node) {
-    if (!node->setId(node->id())) {
-        kdError()<<k_funcinfo<<node->name()<<" Not unique id: "<<m_id<<endl;
-    }
+    //kdDebug()<<k_funcinfo<<"insert id="<<node->id()<<": "<<node->name()<<endl;
     m_nodes.insert(index,node);
     node->setParent(this);
 }
 
 void Node::addChildNode( Node *node, Node *after) {
+    //kdDebug()<<k_funcinfo<<endl;
     int index = m_nodes.findRef(after);
     if (index == -1) {
-        if (!node->setId(node->id())) {
-            kdError()<<k_funcinfo<<node->name()<<" Not unique id: "<<m_id<<endl;
-        }
+        //kdDebug()<<k_funcinfo<<"append id="<<node->id()<<": "<<node->name()<<endl;
         m_nodes.append(node);
         node->setParent(this);
         return;
     }
+    //kdDebug()<<k_funcinfo<<"insert id="<<node->id()<<": "<<node->name()<<endl;
     m_nodes.insert(index+1, node);
     node->setParent(this);
 }
Index: kptcommand.h
===================================================================
--- kptcommand.h	(revision 558331)
+++ kptcommand.h	(working copy)
@@ -188,6 +188,7 @@
 private:
     Node *m_node;
     Node *m_parent;
+    Project *m_project;
     int m_index;
     bool m_mine;
     QPtrList<Appointment> m_appointments;
@@ -376,7 +377,8 @@
 
 private:
     Node &m_node;
-    int m_oldindex, m_newindex;
+    Project *m_project;
+    bool m_moved;
 };
 
 class NodeMoveDownCmd : public NamedCommand
@@ -388,7 +390,8 @@
 
 private:
     Node &m_node;
-    int m_oldindex, m_newindex;
+    Project *m_project;
+    bool m_moved;
 };
 
 class AddRelationCmd : public NamedCommand
Index: kpttask.cc
===================================================================
--- kpttask.cc	(revision 558331)
+++ kpttask.cc	(working copy)
@@ -208,7 +208,9 @@
                 // Load the subproject
                 Project *child = new Project(this);
                 if (child->load(e)) {
-                    addChildNode(child);
+                    if (!project.addSubTask(child, this)) {
+                        delete child;  // TODO: Complain about this
+                    }
                 } else {
                     // TODO: Complain about this
                     delete child;
@@ -217,7 +219,9 @@
                 // Load the task
                 Task *child = new Task(this);
                 if (child->load(e, project)) {
-                    addChildNode(child);
+                    if (!project.addSubTask(child, this)) {
+                        delete child;  // TODO: Complain about this
+                    }
                 } else {
                     // TODO: Complain about this
                     delete child;
