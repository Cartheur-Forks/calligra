Code organization

    * Separate all interfaces from the implementations and place them in krita/sdk. Use these interfaces for DCOP.
      Problem: what to do when it is useful for plugins to derive from a base class with some default functionality. Composition
      with delegation here? Go through patterns book.
    * Separate the core Krita image library from the part; place the former in krita/libkrita and the latter in krita/kritapart
    * Reorganize plugin directories as follows:
        plugins/
                tools/
                    /defaultools
                    /selectiontools
                    /...
                filters/
                    /...
                colorspaces/
                    /rgbu8
                    /rgbu16
                    /...
                paintops/
                    /...
                extensions
                    /imagesize
                    /...
                

Bugs
    * On opening a second image after loading first image but not changing it,
      the second image should be loaded in a second view and not replace the 
      first image in the first view.
    * KisDuplicateOp is 8-bit broken

Transform tool (CBR)

	* Implement native integer versions for bell, bspline, lanczos3 and mitchell filters
	* The option widget should be connected
	* Figure out why scaling down produces sum of weights <255 (Hermite filter)
	* Implement gui, create cursors and update visitor for shearing
	* Fix problem of deselecting during tool use
	* Fix problem of undoing during tool use
	* Add a messagebox that asks whether the changes should be committed or not:
		
		"Sure you want to cancel the Transform" ?
			[Discard] [Apply] [Cancel]
			
	* Apply the changes first on the canvas pixmap, not on the actual layer for
	  quick interactivity 

Integration

	(BSAR, akademy)
	* A krita document embedded in KWord has the wrong scaling and transparency
	* A krita document embedded in another document prints at the wrong place
	* Embedded KOffice objects don't paint themselves correctly
	
	* write the Krita handbook. Split into chapters for easier concurrent editing.
	
	* There is currently no kimgio module for Krita images: implement one by
	  saving a rendered png image into the krita file and extracting that from
	  kimgio. (Saving of a png image in .kra files is done; now we just need to 
          add the kimgio file)
        * There is no easy way to get back from editing an embedded document (if the image is larger
          than the window)
        
	* Hack koMainWindow so the save warning doesn't happen for Krita (BSAR)

Colorspace independence (found with the test colorstrategy)

	* tool gradient uses wrong colors; gradient still uses qcolor everywhere.
	* Map colorspace transforms using the full set of discriminating features:
		source color space (not null) // KisStrategyColorspace descendant
		destination color space (not null) // KisStrategyColorspace descendant
		source profile (may be null) // KisProfile
		destination profile (may be null) // KisProfile
		src lcms color type (may be 0) // frex (COLORSPACE_SH(PT_CMYK) | 
							CHANNELS_SH(4) |
							BYTES_SH(1) | EXTRA_SH(1)) for cmyka
		dst lcms color type (may be 0)
		rendering intent
	* Check and double check the cms capabilities: especially the use of
          profiles in the render/convert/edit paths.
	* Merge grayscale layers back into one color image.
    * Floodfill is not cs independent -- or if its, cmyk floodfill is broken.
    
Core

        * The fill painter (and perhaps other paitners, too) should call addDirtyRect, and the floodfill
          tool should use that rect to blit and notify the image, instead of notifying the complete image.s
	* Fix image resolution handling (zooming, pixel-for-pixel, 100% == zoomed to dpi/xdpi etc.)
	* Adjustment layers (Layers that dynamically apply a filter to
	  the layer they are linked to, these do not store actual
	  image data, except for an occasional mask) These should work on object
          layers (embedded KOFfice objects), too. (BSAR)
	* Mask layers (mask layers created from selection -- vv) (BSAR)
	* Layer groups or even better: a hierachy of collapsable folders with layers (with d&d) 
	* Loading and saving of selections 
	* Anti-aliased filling (requires some simple colorspace function to merge 2 Pixels)
	* Load/save configuration of everything user-settable.
	* Link/unlink layer sets a nice icon. but doesn't actually link the
          layer to anything. Linking should: link a group of layers together. move, transform,
          merge linked, apply filter.
	* Long painter operations (e.g., convolution painter) should use the 
          progressbar and be cancelable.
	* On copying paint devices, do not actually copy the tiles, but only create
	  new tiles when there is change. Also create a memory pool for creating new tiles (BART)

File Format:

	* Save & load all annotations in .kra files
	* Save & load more information, like PNG comments, gamma information, etc


Import/Export

        * Fix gimp XCF PSD and import/export (ImageMagick hacking...)
	* Fix imports to import metadata.

User Interface
    * Add an explanatory textframe to the scaling filter combobox.
    * Add a good crosshair cursor and a crosshair cursor that extends to the rulers.
    * Add a cheatsheet widget that integrates with knewstuff to have tutorials that people
      can download and follow from Krita.
    * Add opacity widget (One that grows more white or transparent (showing those gray blocks) based on the
	  input)
    * Add out-of-gamut selection
    * Fix crash with tablet because of tool refactoring.
    * Fix layout problems in tool option widgets.
    * Disable dragging the toolbox from dock position to dock position (see Karbon)
    * Disable all relevant actions when a layer is locked or invisible. See bug #90456. Show locked status of current layer in statusbar.
    * Add link check to new image dialog to sync width and height
    * Rounding in opacity spinner is wrong: what starts out as 100% is actually not OPACITY_MAX...
    * The description field in color settings is empty
    * Implement the following dialogs / widgets:
		    - Variations (#Boudewijn)
		    - Gradient: remove the autogradient dialog and make into a proper
				gradient dialog, and allow saving gradients.
    * Improve the preview widget - see "doc/the preview widget"
        Still need to clear away the rect when the image 
        is smaller than the preview widget and somehow the initial part show of the 
        image is all we ever see. And there's some horrible flicker here: we'd better 
        create a QImage and bitBlt it, instead of using the painter interface.

    * Show which tool is associated with which pointer (mouse, stylus, eraser, other stylusses) In the statusbar.
    * Allow guides to be disabled. Allow diagonal guides (useful
      for perspective drawings) Bug #108398 
    * Allow snapping to guides.
    * Create templates for often-used image formats. Add save-as-template
    * Add deselect with rmb -- maybe also selectable actions with other tools on rmb?
    * Fix crop tool: when pressing shift, keep aspect ratio, implement gray mask.
	  (Michael Thaler)
    * Allow shape tools to be filled with gradients

	Dockers
		* Tabs in dockers drag-and-droppable (vector of docker
		  windows, create new docker if tab dropped outside existing
		  docker window)
		* Add bird's eye view tab to dockers.
		* Add action (macro) docker
		* Add navigation/zoom docker
		* Add history docker
        * Convert the layer & channel box to a qlistbox; enable the channel box.

   * Use OpenGL if available to composite checkerboard with image so
          while scrolling the checks can stay in place, and the partially
          transparent image move. This maybe needs Qt 4. OpenGL can also be
  	  used to bumpmap images on a height-field canvas.
	  we now have a checkered background layer that we composite everything
	  on, but in future we should composite the image first, and then render
	  it onto a background image -- or not, if another KOffice app wants it
	  rendered with transparency. But that'd probably better wait until Qt 4,
	  where it would be a hardware accelerated snip.
    * the screenshot tool wants to close the current document before it can do 
      its work, what about making it snapshot to a new layer?
    * Doing a copy of a selection, but having the wrong layer selected gives 
      me an empty selection (all transparent).  Pressing paste should say so 
      (popup) instead of creating a new useless layer.
    * the selection tools should allow pressing shift to go to 'substract' 
      mode without adjusting the combobox for the current tool.  (a different 
      pointer would be nice as well)

    * Pressing save for the first time gives me the 'save document as' dialog 
      which is set to 'png' as default file format.
      I suggest to set the default format (in the "save as" dialog) to the krita 
      format for any image that has more then 1 layer.  

    * Layers toolbar has a pretty annoying problem.  Clicking on the eye to 
      enable/disable a layer only works when the scrollbar is at the top, so if 
      there is some offset in the scrollpane the clicks to disable a layer are 
      ignored. Note that double click for edit layer works fine.


Selections

	* On shearing, the whole image is mirrored, not the selected
	  bits.
        * Add opacity slider to selection painting tools so you can
          select something 50%.

Profiles

	* Add an input profile combobox to the import image & scan dialogs
	* Add an export profile combobox to the export image/print dialogs
        * Add loading and saving of profiles associated with images in .krita 
          files.
        * Export profiles in tiff, png and jpg (this and the previous item
          depend on ImageMagick or GraphicsMagick supporting this in some way.)
        * Support out-of-gamut warning indications for parts of an image 
          containing unprintable colours (no idea how to implement this). -> this
          is pretty easy with lcms
	* preferences dialog can show non-existent profile for the monitor profile -> confusing


Tools

	* All tools must have a tool options tab (#Boudewijn, Adrian, Cyrille)
	* Zoom tool should zoom out when alt is pressed. Show zoom-minus cursor in that case
	* Implement the following tools or paintops: 
		    - fix airbrush tool (add rate option, add increase
		      of brush size if kept in one place)
		    - color changer, smudge tool,sharpen tool, blur
		      tool, dodge tool, burn tool, sponge tool (These
		      last are perhaps more generally: painting with
		      filters tool)
		    - stamp tool (paint with patttern/image selection) (#Cyrille)
		    - Text tool (use kotext with a transparent background here?)
		    - Measure tool
	            - calligraphic pen tool
 
	* Pressure sensivitize all relevant tools (e.g. line tool)
        * Add resize slider to freehand tools that resizes the mean brush size.
	* Implement path tools (Michael Thaler?)
	* Sumi-e brush tool
	* Natural media tools (chalk, ink, oil, watercolour -- fun!)
	* Add statusbar messages for tools about modifier keys and other use hints

Plugins

	* As many filters as possible :-)
	* What's the difference between gamma correction and colour
	  adjustment? -> explained by Cyrille's mail, put this in handbook.

Modules

	* Add color models for LAB, HSV, YUV etc.
	* Add Wet & Sticky model (in progress already)
	* Implement Curtiss et. al. for watercolour (Levien, wet dreams. In progress)
	* The composite ops in RGB -> composite.h do not take mask into account
	 - this goes for COPY and CLEAR in grayscale also

Printing

	* No use of the resolution parameter (but the resolution dialog is still only a .ui file and not implemented at all)
	* Use gutenprint or something better for image printing.


Paintops
	*core The convolution paintop doesn't do anything at all -- but it can be used using paint-by-filters.

