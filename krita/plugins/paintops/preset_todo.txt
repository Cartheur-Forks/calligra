* make base settings widget with preview signal and use that in all paintop settings
* refactor kisbrush based paintops to share the brush selector and various pressure curve responses through libpaintop
* move filter setting into libpaintop
* move paintop preview code to preset
* make loading/saving/editing of presets work
* fix mixer canvas to use right paintop preset
* set a default paintop preset in the canvas resource provider
* pass image to kis_custom_brush from kis_brush_selection_widget
* fix dynamic brush where it tries to get a brush shape (it probably shouldn't inherit kis_brush_based_paintop, though)
* fix scripting plugins (include scripts themselves)
* fix action recorder serialize/unserialize
* add checkboxes for curve options

void KisSumiPaintOpSettings::updateImg()
{
#if 0 // XXX: port to KisPaintOpPreset
    const KoColorSpace * cs = KoColorSpaceRegistry::instance()->rgb8();
    KisPaintDeviceSP mydevice = new KisPaintDevice(cs, "preview device");
    Q_CHECK_PTR(mydevice);

    KisPainter painter(mydevice);
    KoColor c(Qt::black, cs);
    painter.setPaintColor(c);

    KisPaintOp * op = KisPaintOpRegistry::instance()->paintOp("sumibrush", this, &painter);
    painter.setPaintOp(op);

    QLabel *label = m_options->previewLbl;
    int width = label->width();
    int height = label->height();

    /*    QPointF p1(0,0);
          KisPaintInformation pi1(p1, 0.5);
          QPointF p2(width,height);
          KisPaintInformation pi2(p2, 1.0);

          painter.paintLine(pi1,pi2);*/
    painter.end();

    QPointF p1(1.0 / 6.0*width, 2.0 / 3.0*height);
    QPointF p2(2.0 / 6.0*width, 1.0 / 3.0*height);
    QPointF p3(4.0 / 6.0*width, 2.0 / 3.0*height);
    QPointF p4(5.0 / 6.0*width, 1.0 / 3.0*height);

    float pathLength;

    //p2-p1
    float dx = p2.x() - p1.x();
    float dy = p2.y() - p1.y();
    pathLength += sqrt(dx * dx + dy * dy);

    dx = p3.x() - p2.x();
    dy = p3.y() - p2.y();
    pathLength += sqrt(dx * dx + dy * dy);

    dx = p4.x() - p3.x();
    dy = p4.y() - p3.y();
    pathLength += sqrt(dx * dx + dy * dy);

    m_options->inkAmountSpinBox->setValue((int)pathLength);

    KisPaintInformation pi1(p1, 0.0);
    KisPaintInformation pi2(p2, 0.95);
    KisPaintInformation pi3(p3, 0.75);
    KisPaintInformation pi4(p4, 0.0);

    QPointF c1(p1.x(), p1.y() - 5);
    QPointF c2(p1.x(), p1.y() + 5);
    painter.paintBezierCurve(pi1, c1, c2, pi2, 0);
    c1.setX(p2.x());
    c1.setY(p2.y() - 5);
    c2.setX(p2.x());
    c2.setY(p2.y() + 5);
    painter.paintBezierCurve(pi2, c1, c2, pi3, 0);
    c1.setX(p3.x());
    c1.setY(p3.y() - 5);
    c2.setX(p3.x());
    c2.setY(p3.y() + 5);
    painter.paintBezierCurve(pi3, c1, c2, pi4, 0);

    qint32  xx = 0,
                 yy = 0,
                      ww = 0,
                           hh = 0;

    mydevice->extent(xx, yy, ww, hh);

    /*    dbgPlugins << "Coords extend()";
          dbgPlugins << xx << " " << yy << " " << ww << " " << hh;
          dbgPlugins << mydevice->extent();*/
    QImage img = mydevice->convertToQImage(0, xx, yy, ww, hh);

    /*    const QString filePath("/tmp/sumi-e-preview.png");
          bool r = img.save(filePath);

          dbgPlugins << "saved to?: "<< r << " " << filePath;*/
    QPixmap pixmap = QPixmap::fromImage(img);

    Q_CHECK_PTR(label);
    label->setPixmap(pixmap);
#endif
}
