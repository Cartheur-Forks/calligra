= Grand Unified Krita TODO =

==View porting==

* initally zooming to fit the window
* adding Koffice parts as layers (or do we remove this completely?)
* make krita's part embeddable in other koffice applications (or do we remove this completely?
* colorchooser docker (but not the big, unified one, that should be a popup)
* palette chooser
* put palette editor back
* cursor style settings (via resource provider?)
* snapping guides
* make ruler work
* update canvas when image size changes
* paint grids
* paint selection (after zooming) (make it toggle)
* paint wet mask (make it toggle)
* paint height mask (make it toggle, make direction of light settable)
* paint gravity mask  (make it toggle)
* add scan plugin action (this never worked in 1.6)
* enable right-click menu again
* enable autoscrolling again
* fix drag and drop (pngs are seen as plain/text)
* menu action for showing/hiding rulers
* save view settings on close
* check handling of what happens when we close a window, open a new image when an
unmodified image is loaded etc.

==Pigment==

* port all colorspaces
* out of gamut visualization (also in unified color selector)
* make indexed colorspaces possible (or maybe skip this?)
* use the icc profile widget from lprof/digikam wherever a profile is selected
* add an input profile combobox to the import image & scan dialogs
* add an export profile combobox to the export image/print dialogs
* support out-of-gamut warning indications for parts of an image containing unprintable colours
* preferences dialog can show non-existent profile for the monitor profile -> confusing
* check and double check the cms capabilities: especially the use of profiles in the render/convert/edit paths.
* make sure conversion between each and every colorspace is possible (API change)
* add something for whitebalance

=== LAB ===

Check http://www.ledet.com/margulis/articles.html and the notes in krita/doc on how to make LAB really useful.

==Colorselectors==
* add simple ribbon with sliders colorselector for in dockers
* make it possible to enter colors with floats


== Painterly stuff ==

* wet & sticky color model, with paintop and visualisation (need a good & fast bump map routine for that)
* make required changes in core to do painterly stuff
* Sumi-e brush tool
* Natural media tools (chalk, ink, oil, watercolour -- fun!)
* Substrate architecture


==Printing==

Chapter on its own. Investigate Gutenprint.

==Files==

* fix mimetypes
* edit and display exif informations (for 2.0) (and support for exif in tiff when libtiff support it fully)
* create a kimgio slave for Krita images so all kde apps can read our file format
* create a kimgio slave for openraster
* implement & design openraster
* implement save-as-template
* xcf import/export filter (but that's a lot of unpleasant work)
* psd import/export filter (I've got the specs up to psd 6.0, later is no longer available for free software, and it's a lot of unpleasant work)
* importing photoshop brushes and palettes

== Resources==

* share gradients, patterns, palettes and brushes with all of KOffice
* make it possible to save a gradient created with an autogradient
* make custom brushes possible
* make custom patters possible
* finish dynamic brushes implementation (cyrille)
* finish chinese brush implementation (boud)


==Core==

* Caching tile manager, deferred loading of images
* extensions to paintop to enable bidi paint transfer and optional transfer of other things like wetness, thickness
* add resolution dialog (boemann)
* macro recording (droplets?)

==Canvas==

=== OpenGL ===
* opengl context
* opengl canvas
* bluescada wants stuff for opengl?
* OpenGL shader for HDR exposure control and selection visualisation.


* resize when image size changes

==Zooming and resolution==

* move zoom actions, zoom mouse wheel handling to KoView
* mapping between screen and document coordinates
* add fit-to-canvas

==Progress information==

* Use thomas zander's class for progress updates; hook into progress bar. Check
for problems with re-entrancy

==Tools==

=== port all tools ===

Get rid of all references to m_subject and KisCanvasController (replacing them by m_canvas, m_currentImage and the stuff we get from the KoCanvasResourceProvicer), moving all painting to the paintEvent (which may force us to keep a datastructure to keep track of things like temporary lines and so), fixing the tools to use points internally instead of pixels.

=== bugs and general todos ===

* make composite op appear in tool option widget
* KoInputDevice changing and handling (KoToolManager & KoToolProxy -- port timer etc.)
* temporary activation of pan tool with spacebar
* painting of tool overlays (rubber bands, control points, temporary shapes etc)
* make use of pressure in all tools where it could be relevant
* Investigate the best way to update the canvas for the freehand tools & investigate how to do a brush-shaped sprite on the canvas (nick code from QGraphicsView?)


=== paint tools ===

* Add slider that resizes the mean brush size
* drawing like in describe in "Computer-Generated Pen-and-Ink Illustration" of Winkenbach and Salesin (for 2.0)

=== Shape tools ===

* implement fill-with-gradient
* implement fill-strokeing using the current brush in various ways

=== Crop Tool ===

* have presets in a combobox, for instance:

- Web landscape (800x533px, 72 dpi)
- Web portrait (533x800px, 72 dpi)
- Print landscape 300 dpi

Make these presets saveable.

* show autosnapping guides as hints for composition rules when cropping (gulden snede)
* Fix interaction with guides
* Show area outside crop in gray wash
* Implement keep aspect ratio

=== Zoom Tool ===

* unzoom when alt is pressed; show - in cursor in that case

=== Measure Tool ===

* implement it

==Statusbar==

* layout of widgets
* show size of image in statusbar
* show cursor position in statusbar
* make zoomlevel editable in statusbar
* show memory consumption/swap consumption in statusbar

Note: KDE appears to have a widget with a fixed width; use that for zoom and cursor position

==Flake==

* design and implement adapter classes around layer groups, layers and selections/masks so everything is a flake shape in a shapecontainer hierarchy.
* make it possible to embed other flake shapes
* make it possible to edit non-layer flake shapes that are in the same container using the interaction tool
* add adapter class to pathshape to stroke path shape with krita brushes
* fix bug where clicking with interaction tool means painting doesn't work anymore

==Filters==

* Make filters work on a selection of channels. Question: same settings for all selected channels, or a setting per selected channel?
* non photorealistic filters (for external plugin and 2.0)
* image enhancement filters (for external plugin and 2.0)

=== Sharpen ===

* make configurable

=== Unsharp Mask ===

* make work as an adjustment layer

See: http://www.photo.net/bboard/q-and-a-fetch-msg.tcl?msg_id=3D000Qi5
http://www.earthboundlight.com/phototips/unsharp-mask.html
http://home.planet.nl/~astro.ccd.scholten/processing_E.htm

=== Colorize ===

This is not perchannel adjustment: http://docs.gimp.org/en/gimp-tool-colorize.html

* make work as an adjustment layer

=== Soft glow filter ===

http://hans.breuer.org/gimp/pdb/plug_in.html#plug_in_softglow

=== Variations ===

I removed the mockup, but we want a filter somewhat like this one.


== Printing and WYSIWYG== 

* fix image resolution handling (zooming, pixel-for-pixel, 100% == zoomed to dpi/xdpi etc.)
* make sure displays with non-square pixels also show images correctly
* implement resolution dialogs whereever needed (image creation, rescale, zoom etc)
* use the resolution parameter (but the resolution dialog is still only a .ui file and not implemented at all)
* make sure the printing is colormanaged (check X-PDF and gutenprint)


== New ruler system ==

* make and use koffice-wide ruler (do this in cooperation with flake and kofficelib)
* allow snapping to guides.
* implement autoguides from kofficelib
* use koffice wide modifierkeys standard


== New selection system==

* selections, adj. masks, wetness, height masks (all 8-bit mask ideas) as sublayers to paint layers, and make them movable between layers and x,y, toggle on/off. Allow more than one mask per layer
* add opacity slider to selection painting tools so you can select something 50%.
* loading and saving of selections
* BUG 121975: selections and group layers.
* doing a copy of a selection, but having the wrong layer selected gives me an empty selection (all transparent).  Pressing paste should say so (popup) instead of creating a new useless layer.
* add deselect with rmb -- maybe also selectable actions with other tools on rmb?
* the selection tools should allow pressing shift to go to 'substract' mode without adjusting the combobox for the current tool.  (a different pointer would be nice as well)
* add marching ants representation of the active selection?


== History & versioning==

* create history docker
* investigate if per layer history is a good idea

== Fileformat and import/export==

* save & load all annotations in .kra files
* save & load more information, like PNG comments, gamma information, etc
* fix gimp XCF PSD and import/export (ImageMagick hacking...)
* fix imports to import metadata.
* Saving 16 bit grayscale to jpeg silently converts to 8 bit grayscale (actually saving to both 8bits and 16bits jpeg with the same build is impossible with libjpeg)

==Core==

* move core/ui class private members to d-pointers
* fix KisFilter::colorSpaceIndependence/worksWith overlap
* add api & gui to exclude channels from compositing
* add a mechanism for cspaces to start long-running filters when a paintdev is created -- and a gui to turn that on and off, perhaps something analogous to a channels box
* make set of filter categories extensible
* anti-aliased filling (requires some simple colorspace function to merge 2 Pixels)
* load/save configuration of everything user-settable.
* the fill painter (and perhaps other paitners, too) should call addDirtyRect, and the floodfill tool should use that rect to blit and notify the image, instead of notifying the complete image.
* A possible cause for the threadpool crashing issue is the fact that we throw QStrings across threads, and kDebug in threaded filters. Possible fix: use std::string in KisID and don't kDebug in filters. But that's all a long shot, hence the '?' ;)


General user interface

* color picker: top combo should be as wide as the whole widget; the widget is a bit too big, we should try to make the listview a lot smaller. Maybe just use labels here?
* the edit palette dialog two-step should be changed into a single dialog
* add end poly entry to the popup menu when the poly tool is active (note: make this more generically useful for tools. Great idea by David Herman)
* make scaling filter more user friendly by removing the combo and just presenting "fast" and "good"
* add a cheatsheet widget that integrates with knewstuff to have tutorials that people can download and follow from Krita.
* create opacity widget (One that grows more white or transparent (showing those gray blocks) based on the input)
* Note Ilmari's remarks on the mailing list

==Integration==

* a krita document embedded in KWord has the wrong scaling and transparency
* a krita document embedded in another document prints at the wrong place
* embedded KOffice objects don't paint themselves correctly


==Transform tool==

* make a good option widget
* implement gui, create cursors and update visitor for shearing

==Plugins==

* finish, polish and document scripting support
* document plugin API
* create plugin that merges grayscale layers back into one color image.
* as many filters as possible :-)
* sharpen filter with settable sharpness. Look at digikam's code for this.

==Tools==

* dodge and burn tool (see Dik Takken's email)

==Release==

* develop thorough test plan and exercise it on several installations before release


==Bugs==

* Open an image, add image as new layer, resize layer, undo: undo removes the layer
* The change layer size dialog is not the same as the change image dialog, and should therefore be called the scale layer dialog. (Resizing a layer makes no sense)
* open an image, add an adjustment layer to the image (I used the pixelize filter). Click on the original layer in the layer dialog box and paint something. The undo the painting and undo add layer. Krita's toolbox will become greyed out and you can't paint. I think this is already a bug and should be fixed. But next, try to add an adjustment layer again -> Krita crashes.
* zooming in leaves display artefacts (see Bart's mail)

See also bugzilla!

==Filters==

Do levels similar to lightzone http://www.lightcrafts.com/products/lightzone/. Ask Alexandre Buisse how it should work, exactly. http://sonic.net/~rat/lightcrafts/ for a Linux demo


==Painting with filters==

* sharpen: works badly, paints circles -- this used to be okay!
* small tiles: makes circles, otherwise effect is fun
