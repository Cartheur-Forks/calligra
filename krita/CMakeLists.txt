kde4_header()
project(krita)

find_package(LCMS)

macro_optional_find_package(Kunittest)

set(REQUIRED_LCMS_VERSION 112)

if(LCMS_FOUND AND NOT LCMS_VERSION LESS ${REQUIRED_LCMS_VERSION})
    set(SHOULD_BUILD_KRITA TRUE)
    if(LCMS_VERSION EQUAL 114)
        message(STATUS "==============================================")
        message(STATUS "WARNING: you are using version 1.14 of lcms")
        message(STATUS " this version has a bug that break filling")
        message(STATUS " and select similar colors in at least CMYK")
        message(STATUS " you might want to use a newer version, or")
        message(STATUS " an older")
        message(STATUS "==============================================")
    endif(LCMS_VERSION EQUAL 114)
else(LCMS_FOUND AND NOT LCMS_VERSION LESS ${REQUIRED_LCMS_VERSION})
	set(SHOULD_BUILD_KRITA FALSE)
	message(STATUS  "krita requires LittleCMS 1.12 or greater. Krita will not be built.\n"
			"   If you want to compile Krita you should install:\n"
			"   lcms 1.12 or newer (http://www.littlecms.com/)\n"
			"   and avoid 1.14 as it has a major bug in CMYK")
endif(LCMS_FOUND AND NOT LCMS_VERSION LESS ${REQUIRED_LCMS_VERSION})

if (SHOULD_BUILD_KRITA)
    
    macro_optional_find_package(OpenGL)
    
    set(HAVE_OPENGL 0)

    if(OPENGL_FOUND)
        message(STATUS "Found OpenGL: ${OPENGL_LIBRARIES}")
        if(QT_QTOPENGL_FOUND)
            message(STATUS "Found Qt OpenGL support")
            set(HAVE_OPENGL 1)
        else(QT_QTOPENGL_FOUND)
            message(STATUS "Did NOT find Qt OpenGL support. Check your Qt configuration")
        endif(QT_QTOPENGL_FOUND)
    else(OPENGL_FOUND)
        message(STATUS "Did NOT find OpenGL libraries")
    endif(OPENGL_FOUND)

    if(NOT HAVE_OPENGL)
        message(STATUS " * krita will not be able to use OpenGL for")
        message(STATUS "   hardware accelerated rendering.")
    endif(NOT HAVE_OPENGL)

    if(X11_Xinput_FOUND)
        set(HAVE_XINPUTEXT 1)
        message(STATUS "Found XInput extension")
    else(X11_Xinput_FOUND)
        set(HAVE_XINPUTEXT 0)
    endif(X11_Xinput_FOUND)

    if(UNIX)
        set(CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES};m")
    endif(UNIX)

    check_function_exists(powf HAVE_POWF)

    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config-krita.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-krita.h)

	set(LINK_OPENEXR_LIB)
	if(OPENEXR_FOUND)
    	include_directories(${OPENEXR_INCLUDE_DIR})
    	set(LINK_OPENEXR_LIB ${OPENEXR_LIBRARIES})
	endif(OPENEXR_FOUND)


    set(KRITA_INCLUDES
        # For config-krita.h
        ${CMAKE_CURRENT_BINARY_DIR}

        ${CMAKE_SOURCE_DIR}/krita/core
        ${CMAKE_SOURCE_DIR}/krita/core/tiles
        ${CMAKE_SOURCE_DIR}/krita/sdk
        ${CMAKE_SOURCE_DIR}/krita/kritacolor
        ${CMAKE_SOURCE_DIR}/krita/kritacolor/colorspaces
        ${CMAKE_SOURCE_DIR}/krita/ui
        ${CMAKE_SOURCE_DIR}/krita/colorspaces/rgb_u8

        # For generated files from .ui
        ${CMAKE_BINARY_DIR}/krita/ui

        ${KOPAINTER_INCLUDES}
        ${KOPALETTE_INCLUDES}
        ${KOFFICEUI_INCLUDES}
        ${LCMS_INCLUDE_DIR}

        # 'Export' this for use by filters
        CACHE INTERNAL ""
        )

    include_directories(${KRITA_INCLUDES})

    if(HAVE_OPENGL)
        include_directories(${OPENGL_INCLUDE_DIR})
    endif(HAVE_OPENGL)

    if(HAVE_XINPUTEXT)
        include_directories(${X11_Xinput_INCLUDE_PATH})
    endif(HAVE_XINPUTEXT)
    
    add_subdirectory( sdk )
    add_subdirectory( kritacolor )
    add_subdirectory( core )
    add_subdirectory( ui )
    add_subdirectory( dtd )
    add_subdirectory( colorspaces )
    add_subdirectory( plugins )
    add_subdirectory( data )
    add_subdirectory( pics )
    
    ########### next target ###############
    
    set(kritacommon_LIB_SRCS dummy.cc )
    
    kde4_automoc(${kritacommon_LIB_SRCS})
    
    kde4_add_library(kritacommon SHARED ${kritacommon_LIB_SRCS})
    
    file(WRITE dummy.cc "//autogenerated file by cmake\n")
    
    target_link_libraries(kritacommon ${KDE4_KDECORE_LIBS} ${LCMS_LIBRARIES} kritaimage kritaui kritacolor kofficeui kopainter kopalette )
    
    set_target_properties(kritacommon PROPERTIES VERSION 1.0.0 SOVERSION 1 )
    install_targets(${LIB_INSTALL_DIR} kritacommon )
    
    
    ########### next target ###############
    
    set(kritapart_PART_SRCS krita_part_init.cc )
    
    kde4_automoc(${kritapart_PART_SRCS})
    
    kde4_add_plugin(kritapart WITH_PREFIX ${kritapart_PART_SRCS})
    
    kde4_install_libtool_file( ${PLUGIN_INSTALL_DIR} kritapart )
    
    target_link_libraries(kritapart  ${KDE4_KDECORE_LIBS} kritacommon )
    
    install_targets(${PLUGIN_INSTALL_DIR} kritapart )
    
    
    ########### next target ###############
    
    set(krita_KDEINIT_SRCS main.cc )
    
    kde4_automoc(${krita_KDEINIT_SRCS})
    
    kde4_add_kdeinit_executable( krita ${krita_KDEINIT_SRCS})
    
    target_link_libraries(kdeinit_krita  ${KDE4_KDECORE_LIBS} kofficecore )
    
    install_targets(${LIB_INSTALL_DIR} kdeinit_krita )
    
    target_link_libraries( krita kdeinit_krita )
    install_targets(/bin krita )
    
    ########### install files ###############
    
    install_files( ${XDG_APPS_DIR} FILES  krita.desktop )
    install_files( ${MIME_INSTALL_DIR}/application FILES  )
    install_files( ${SERVICES_INSTALL_DIR} FILES  kritapart.desktop )
    install_files( ${DATA_INSTALL_DIR}/krita FILES  krita.rc krita_readonly.rc )
    
    #kde4_create_doxygen_docs( EXCLUDE CImg.h colorspaces plugins kritacolor/colorspaces core/tiles  )
endif (SHOULD_BUILD_KRITA)

kde4_footer()


#original Makefile.am contents follow:

#INCLUDES  = $(KOFFICE_INCLUDES) $(KOPAINTER_INCLUDES) $(all_includes)
#
### The common lib, shared between the part, the plugins, and the filters
#lib_LTLIBRARIES = libkritacommon.la
#libkritacommon_la_SOURCES = dummy.cc
#libkritacommon_la_LDFLAGS = $(all_libraries) -version-info 1:0 -no-undefined
#libkritacommon_la_LIBADD = sdk/libkritasdk.la core/libkritaimage.la ui/libkritaui.la kritacolor/libkritacolor.la $(LCMS_LIBS) $(LIB_KOFFICEUI) $(LIB_KOPAINTER) $(LIB_KOPALETTE) $(LIB_XINPUTEXT)
#
### The part
#kde_module_LTLIBRARIES = libkritapart.la
#libkritapart_la_SOURCES = krita_part_init.cc
#libkritapart_la_LDFLAGS = $(all_libraries) -module $(KDE_PLUGIN)
#libkritapart_la_LIBADD = libkritacommon.la
#
#METASOURCES = AUTO
#
### The kdeinit loadable module and executable
#kdeinit_LTLIBRARIES = krita.la
#bin_PROGRAMS =
#krita_la_SOURCES = main.cc
#krita_la_LDFLAGS = $(all_libraries) -module $(KDE_PLUGIN)
#krita_la_LIBADD = $(LIB_KOFFICECORE)
#
#xdg_apps_DATA = krita.desktop
#kdemimedir = $(kde_mimedir)/application
#
#rcdir = $(kde_datadir)/krita
#rc_DATA = krita.rc krita_readonly.rc
#
#SUBDIRS = sdk kritacolor core ui . dtd colorspaces plugins data pics 
## Needed to compile libkritacommon.la, which has no source files to itself
## but everything in static libs.
#dummy.cc:
#	echo > dummy.cc
#
#messages: rc.cpp
#	$(EXTRACTRC) `find . -name \*.ui` >> rc.cpp
#	$(EXTRACTRC) `find . -name \*.rc` >> rc.cpp
#	perl extracti18n.pl > i18ndata
#	$(XGETTEXT) i18ndata rc.cpp `find . -name \*.cc -o -name \*.h` ui/kis_aboutdata.h -o $(podir)/krita.pot
#	rm -f i18ndata
#
#DOXYGEN_EXCLUDE = CImg.h colorspaces plugins kritacolor/colorspaces core/tiles
#include $(top_srcdir)/admin/Doxyfile.am
#
#kde_services_DATA = kritapart.desktop
#
